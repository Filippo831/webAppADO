{"version":3,"file":"react-query.development.js","sources":["../node_modules/@babel/runtime/helpers/esm/inheritsLoose.js","../src/core/subscribable.ts","../node_modules/@babel/runtime/helpers/esm/extends.js","../src/core/utils.ts","../src/core/focusManager.ts","../src/core/onlineManager.ts","../src/core/retryer.ts","../src/core/notifyManager.ts","../src/core/logger.ts","../src/core/query.ts","../src/core/queryCache.ts","../src/core/mutation.ts","../src/core/mutationCache.ts","../src/core/infiniteQueryBehavior.ts","../src/core/queryClient.ts","../src/core/queryObserver.ts","../src/core/queriesObserver.ts","../src/core/infiniteQueryObserver.ts","../src/core/mutationObserver.ts","../src/react/QueryClientProvider.tsx","../src/react/QueryErrorResetBoundary.tsx","../src/react/useIsFetching.ts","../src/react/useMutation.ts","../src/react/useBaseQuery.ts","../src/react/useQuery.ts","../src/react/useQueries.ts","../src/react/useInfiniteQuery.ts"],"sourcesContent":["export default function _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}","type Listener = () => void\n\nexport class Subscribable<TListener extends Function = Listener> {\n  protected listeners: TListener[]\n\n  constructor() {\n    this.listeners = []\n  }\n\n  subscribe(listener?: TListener): () => void {\n    const callback = listener || (() => undefined)\n\n    this.listeners.push(callback as TListener)\n\n    this.onSubscribe()\n\n    return () => {\n      this.listeners = this.listeners.filter(x => x !== callback)\n      this.onUnsubscribe()\n    }\n  }\n\n  hasListeners(): boolean {\n    return this.listeners.length > 0\n  }\n\n  protected onSubscribe(): void {\n    // Do nothing\n  }\n\n  protected onUnsubscribe(): void {\n    // Do nothing\n  }\n}\n","export default function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}","import type { Query } from './query'\nimport type {\n  MutationFunction,\n  MutationKey,\n  MutationOptions,\n  QueryFunction,\n  QueryKey,\n  QueryKeyHashFunction,\n  QueryOptions,\n} from './types'\n\n// TYPES\n\nexport interface QueryFilters {\n  /**\n   * Include or exclude active queries\n   */\n  active?: boolean\n  /**\n   * Match query key exactly\n   */\n  exact?: boolean\n  /**\n   * Include or exclude inactive queries\n   */\n  inactive?: boolean\n  /**\n   * Include queries matching this predicate function\n   */\n  predicate?: (query: Query) => boolean\n  /**\n   * Include queries matching this query key\n   */\n  queryKey?: QueryKey\n  /**\n   * Include or exclude stale queries\n   */\n  stale?: boolean\n  /**\n   * Include or exclude fetching queries\n   */\n  fetching?: boolean\n}\n\nexport type DataUpdateFunction<TInput, TOutput> = (input: TInput) => TOutput\n\nexport type Updater<TInput, TOutput> =\n  | TOutput\n  | DataUpdateFunction<TInput, TOutput>\n\n// UTILS\n\nexport const isServer = typeof window === 'undefined'\n\nexport function noop(): undefined {\n  return undefined\n}\n\nexport function functionalUpdate<TInput, TOutput>(\n  updater: Updater<TInput, TOutput>,\n  input: TInput\n): TOutput {\n  return typeof updater === 'function'\n    ? (updater as DataUpdateFunction<TInput, TOutput>)(input)\n    : updater\n}\n\nexport function isValidTimeout(value: any): value is number {\n  return typeof value === 'number' && value >= 0 && value !== Infinity\n}\n\nexport function ensureArray<T>(value: T | T[]): T[] {\n  return Array.isArray(value) ? value : [value]\n}\n\nexport function difference<T>(array1: T[], array2: T[]): T[] {\n  return array1.filter(x => array2.indexOf(x) === -1)\n}\n\nexport function replaceAt<T>(array: T[], index: number, value: T): T[] {\n  const copy = array.slice(0)\n  copy[index] = value\n  return copy\n}\n\nexport function timeUntilStale(updatedAt: number, staleTime?: number): number {\n  return Math.max(updatedAt + (staleTime || 0) - Date.now(), 0)\n}\n\nexport function parseQueryArgs<TOptions extends QueryOptions<any, any, any>>(\n  arg1: QueryKey | TOptions,\n  arg2?: QueryFunction<any> | TOptions,\n  arg3?: TOptions\n): TOptions {\n  if (!isQueryKey(arg1)) {\n    return arg1 as TOptions\n  }\n\n  if (typeof arg2 === 'function') {\n    return { ...arg3, queryKey: arg1, queryFn: arg2 } as TOptions\n  }\n\n  return { ...arg2, queryKey: arg1 } as TOptions\n}\n\nexport function parseMutationArgs<\n  TOptions extends MutationOptions<any, any, any, any>\n>(\n  arg1: MutationKey | MutationFunction<any, any> | TOptions,\n  arg2?: MutationFunction<any, any> | TOptions,\n  arg3?: TOptions\n): TOptions {\n  if (isQueryKey(arg1)) {\n    if (typeof arg2 === 'function') {\n      return { ...arg3, mutationKey: arg1, mutationFn: arg2 } as TOptions\n    }\n    return { ...arg2, mutationKey: arg1 } as TOptions\n  }\n\n  if (typeof arg1 === 'function') {\n    return { ...arg2, mutationFn: arg1 } as TOptions\n  }\n\n  return { ...arg1 } as TOptions\n}\n\nexport function parseFilterArgs<\n  TFilters extends QueryFilters,\n  TOptions = unknown\n>(\n  arg1?: QueryKey | TFilters,\n  arg2?: TFilters | TOptions,\n  arg3?: TOptions\n): [TFilters, TOptions | undefined] {\n  return (isQueryKey(arg1)\n    ? [{ ...arg2, queryKey: arg1 }, arg3]\n    : [arg1 || {}, arg2]) as [TFilters, TOptions]\n}\n\nexport function matchQuery(\n  filters: QueryFilters,\n  query: Query<any, any>\n): boolean {\n  const {\n    active,\n    exact,\n    fetching,\n    inactive,\n    predicate,\n    queryKey,\n    stale,\n  } = filters\n\n  if (isQueryKey(queryKey)) {\n    if (exact) {\n      const hashFn = getQueryKeyHashFn(query.options)\n      if (query.queryHash !== hashFn(queryKey)) {\n        return false\n      }\n    } else if (!partialMatchKey(query.queryKey, queryKey)) {\n      return false\n    }\n  }\n\n  let isActive\n\n  if (inactive === false || (active && !inactive)) {\n    isActive = true\n  } else if (active === false || (inactive && !active)) {\n    isActive = false\n  }\n\n  if (typeof isActive === 'boolean' && query.isActive() !== isActive) {\n    return false\n  }\n\n  if (typeof stale === 'boolean' && query.isStale() !== stale) {\n    return false\n  }\n\n  if (typeof fetching === 'boolean' && query.isFetching() !== fetching) {\n    return false\n  }\n\n  if (predicate && !predicate(query)) {\n    return false\n  }\n\n  return true\n}\n\nexport function getQueryKeyHashFn(\n  options?: QueryOptions<any, any>\n): QueryKeyHashFunction {\n  return options?.queryKeyHashFn || hashQueryKey\n}\n\n/**\n * Default query keys hash function.\n */\nexport function hashQueryKey(queryKey: QueryKey): string {\n  return stableValueHash(queryKey)\n}\n\n/**\n * Hashes the value into a stable hash.\n */\nexport function stableValueHash(value: any): string {\n  return JSON.stringify(value, (_, val) =>\n    isPlainObject(val)\n      ? Object.keys(val)\n          .sort()\n          .reduce((result, key) => {\n            result[key] = val[key]\n            return result\n          }, {} as any)\n      : val\n  )\n}\n\n/**\n * Checks if key `b` partially matches with key `a`.\n */\nexport function partialMatchKey(\n  a: string | unknown[],\n  b: string | unknown[]\n): boolean {\n  return partialDeepEqual(ensureArray(a), ensureArray(b))\n}\n\n/**\n * Checks if `b` partially matches with `a`.\n */\nexport function partialDeepEqual(a: any, b: any): boolean {\n  if (a === b) {\n    return true\n  }\n\n  if (typeof a !== typeof b) {\n    return false\n  }\n\n  if (a && b && typeof a === 'object' && typeof b === 'object') {\n    return !Object.keys(b).some(key => !partialDeepEqual(a[key], b[key]))\n  }\n\n  return false\n}\n\n/**\n * This function returns `a` if `b` is deeply equal.\n * If not, it will replace any deeply equal children of `b` with those of `a`.\n * This can be used for structural sharing between JSON values for example.\n */\nexport function replaceEqualDeep<T>(a: unknown, b: T): T\nexport function replaceEqualDeep(a: any, b: any): any {\n  if (a === b) {\n    return a\n  }\n\n  const array = Array.isArray(a) && Array.isArray(b)\n\n  if (array || (isPlainObject(a) && isPlainObject(b))) {\n    const aSize = array ? a.length : Object.keys(a).length\n    const bItems = array ? b : Object.keys(b)\n    const bSize = bItems.length\n    const copy: any = array ? [] : {}\n\n    let equalItems = 0\n\n    for (let i = 0; i < bSize; i++) {\n      const key = array ? i : bItems[i]\n      copy[key] = replaceEqualDeep(a[key], b[key])\n      if (copy[key] === a[key]) {\n        equalItems++\n      }\n    }\n\n    return aSize === bSize && equalItems === aSize ? a : copy\n  }\n\n  return b\n}\n\n/**\n * Shallow compare objects. Only works with objects that always have the same properties.\n */\nexport function shallowEqualObjects<T>(a: T, b: T): boolean {\n  if ((a && !b) || (b && !a)) {\n    return false\n  }\n\n  for (const key in a) {\n    if (a[key] !== b[key]) {\n      return false\n    }\n  }\n\n  return true\n}\n\n// Copied from: https://github.com/jonschlinkert/is-plain-object\nexport function isPlainObject(o: any): o is Object {\n  if (!hasObjectPrototype(o)) {\n    return false\n  }\n\n  // If has modified constructor\n  const ctor = o.constructor\n  if (typeof ctor === 'undefined') {\n    return true\n  }\n\n  // If has modified prototype\n  const prot = ctor.prototype\n  if (!hasObjectPrototype(prot)) {\n    return false\n  }\n\n  // If constructor does not have an Object-specific method\n  if (!prot.hasOwnProperty('isPrototypeOf')) {\n    return false\n  }\n\n  // Most likely a plain Object\n  return true\n}\n\nfunction hasObjectPrototype(o: any): boolean {\n  return Object.prototype.toString.call(o) === '[object Object]'\n}\n\nexport function isQueryKey(value: any): value is QueryKey {\n  return typeof value === 'string' || Array.isArray(value)\n}\n\nexport function isError(value: any): value is Error {\n  return value instanceof Error\n}\n\nexport function sleep(timeout: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, timeout)\n  })\n}\n\n/**\n * Schedules a microtask.\n * This can be useful to schedule state updates after rendering.\n */\nexport function scheduleMicrotask(callback: () => void): void {\n  Promise.resolve()\n    .then(callback)\n    .catch(error =>\n      setTimeout(() => {\n        throw error\n      })\n    )\n}\n","import { Subscribable } from './subscribable'\nimport { isServer } from './utils'\n\nclass FocusManager extends Subscribable {\n  private focused?: boolean\n  private removeEventListener?: () => void\n\n  protected onSubscribe(): void {\n    if (!this.removeEventListener) {\n      this.setDefaultEventListener()\n    }\n  }\n\n  setEventListener(\n    setup: (onFocus: () => void) => (focused?: boolean) => void\n  ): void {\n    if (this.removeEventListener) {\n      this.removeEventListener()\n    }\n    this.removeEventListener = setup((focused?: boolean) => {\n      if (typeof focused === 'boolean') {\n        this.setFocused(focused)\n      } else {\n        this.onFocus()\n      }\n    })\n  }\n\n  setFocused(focused?: boolean): void {\n    this.focused = focused\n\n    if (focused) {\n      this.onFocus()\n    }\n  }\n\n  onFocus(): void {\n    this.listeners.forEach(listener => {\n      listener()\n    })\n  }\n\n  isFocused(): boolean {\n    if (typeof this.focused === 'boolean') {\n      return this.focused\n    }\n\n    // document global can be unavailable in react native\n    if (typeof document === 'undefined') {\n      return true\n    }\n\n    return [undefined, 'visible', 'prerender'].includes(\n      document.visibilityState\n    )\n  }\n\n  private setDefaultEventListener() {\n    if (!isServer && window?.addEventListener) {\n      this.setEventListener(onFocus => {\n        // Listen to visibillitychange and focus\n        window.addEventListener('visibilitychange', onFocus, false)\n        window.addEventListener('focus', onFocus, false)\n\n        return () => {\n          // Be sure to unsubscribe if a new handler is set\n          window.removeEventListener('visibilitychange', onFocus)\n          window.removeEventListener('focus', onFocus)\n        }\n      })\n    }\n  }\n}\n\nexport const focusManager = new FocusManager()\n","import { Subscribable } from './subscribable'\nimport { isServer } from './utils'\n\nclass OnlineManager extends Subscribable {\n  private online?: boolean\n  private removeEventListener?: () => void\n\n  protected onSubscribe(): void {\n    if (!this.removeEventListener) {\n      this.setDefaultEventListener()\n    }\n  }\n\n  setEventListener(\n    setup: (setOnline: () => void) => (online?: boolean) => void\n  ): void {\n    if (this.removeEventListener) {\n      this.removeEventListener()\n    }\n    this.removeEventListener = setup((online?: boolean) => {\n      if (typeof online === 'boolean') {\n        this.setOnline(online)\n      } else {\n        this.onOnline()\n      }\n    })\n  }\n\n  setOnline(online?: boolean): void {\n    this.online = online\n\n    if (online) {\n      this.onOnline()\n    }\n  }\n\n  onOnline(): void {\n    this.listeners.forEach(listener => {\n      listener()\n    })\n  }\n\n  isOnline(): boolean {\n    if (typeof this.online === 'boolean') {\n      return this.online\n    }\n\n    if (\n      typeof navigator === 'undefined' ||\n      typeof navigator.onLine === 'undefined'\n    ) {\n      return true\n    }\n\n    return navigator.onLine\n  }\n\n  private setDefaultEventListener() {\n    if (!isServer && window?.addEventListener) {\n      this.setEventListener(onOnline => {\n        // Listen to online\n        window.addEventListener('online', onOnline, false)\n        window.addEventListener('offline', onOnline, false)\n\n        return () => {\n          // Be sure to unsubscribe if a new handler is set\n          window.removeEventListener('online', onOnline)\n          window.removeEventListener('offline', onOnline)\n        }\n      })\n    }\n  }\n}\n\nexport const onlineManager = new OnlineManager()\n","import { focusManager } from './focusManager'\nimport { onlineManager } from './onlineManager'\nimport { functionalUpdate, sleep } from './utils'\n\n// TYPES\n\ninterface RetryerConfig<TData = unknown, TError = unknown> {\n  fn: () => TData | Promise<TData>\n  onError?: (error: TError) => void\n  onSuccess?: (data: TData) => void\n  onFail?: (failureCount: number, error: TError) => void\n  onPause?: () => void\n  onContinue?: () => void\n  retry?: RetryValue<TError>\n  retryDelay?: RetryDelayValue\n}\n\nexport type RetryValue<TError> = boolean | number | ShouldRetryFunction<TError>\n\ntype ShouldRetryFunction<TError = unknown> = (\n  failureCount: number,\n  error: TError\n) => boolean\n\nexport type RetryDelayValue = number | RetryDelayFunction\n\ntype RetryDelayFunction = (failureCount: number) => number\n\nfunction defaultRetryDelay(failureCount: number) {\n  return Math.min(1000 * 2 ** failureCount, 30000)\n}\n\ninterface Cancelable {\n  cancel(): void\n}\n\nexport function isCancelable(value: any): value is Cancelable {\n  return typeof value?.cancel === 'function'\n}\n\nexport interface CancelOptions {\n  revert?: boolean\n  silent?: boolean\n}\n\nexport class CancelledError {\n  revert?: boolean\n  silent?: boolean\n  constructor(options?: CancelOptions) {\n    this.revert = options?.revert\n    this.silent = options?.silent\n  }\n}\n\nexport function isCancelledError(value: any): value is CancelledError {\n  return value instanceof CancelledError\n}\n\n// CLASS\n\nexport class Retryer<TData = unknown, TError = unknown> {\n  cancel: (options?: CancelOptions) => void\n  cancelRetry: () => void\n  continue: () => void\n  failureCount: number\n  isPaused: boolean\n  isResolved: boolean\n  isTransportCancelable: boolean\n  promise: Promise<TData>\n\n  constructor(config: RetryerConfig<TData, TError>) {\n    let cancelRetry = false\n    let cancelFn: ((options?: CancelOptions) => void) | undefined\n    let continueFn: ((value?: unknown) => void) | undefined\n    let promiseResolve: (data: TData) => void\n    let promiseReject: (error: TError) => void\n\n    this.cancel = cancelOptions => cancelFn?.(cancelOptions)\n    this.cancelRetry = () => {\n      cancelRetry = true\n    }\n    this.continue = () => continueFn?.()\n    this.failureCount = 0\n    this.isPaused = false\n    this.isResolved = false\n    this.isTransportCancelable = false\n    this.promise = new Promise<TData>((outerResolve, outerReject) => {\n      promiseResolve = outerResolve\n      promiseReject = outerReject\n    })\n\n    const resolve = (value: any) => {\n      if (!this.isResolved) {\n        this.isResolved = true\n        config.onSuccess?.(value)\n        continueFn?.()\n        promiseResolve(value)\n      }\n    }\n\n    const reject = (value: any) => {\n      if (!this.isResolved) {\n        this.isResolved = true\n        config.onError?.(value)\n        continueFn?.()\n        promiseReject(value)\n      }\n    }\n\n    const pause = () => {\n      return new Promise(continueResolve => {\n        continueFn = continueResolve\n        this.isPaused = true\n        config.onPause?.()\n      }).then(() => {\n        continueFn = undefined\n        this.isPaused = false\n        config.onContinue?.()\n      })\n    }\n\n    // Create loop function\n    const run = () => {\n      // Do nothing if already resolved\n      if (this.isResolved) {\n        return\n      }\n\n      let promiseOrValue: any\n\n      // Execute query\n      try {\n        promiseOrValue = config.fn()\n      } catch (error) {\n        promiseOrValue = Promise.reject(error)\n      }\n\n      // Create callback to cancel this fetch\n      cancelFn = cancelOptions => {\n        if (!this.isResolved) {\n          reject(new CancelledError(cancelOptions))\n\n          // Cancel transport if supported\n          if (isCancelable(promiseOrValue)) {\n            try {\n              promiseOrValue.cancel()\n            } catch {}\n          }\n        }\n      }\n\n      // Check if the transport layer support cancellation\n      this.isTransportCancelable = isCancelable(promiseOrValue)\n\n      Promise.resolve(promiseOrValue)\n        .then(resolve)\n        .catch(error => {\n          // Stop if the fetch is already resolved\n          if (this.isResolved) {\n            return\n          }\n\n          // Do we need to retry the request?\n          const retry = config.retry ?? 3\n          const retryDelay = config.retryDelay ?? defaultRetryDelay\n          const delay = functionalUpdate(retryDelay, this.failureCount) || 0\n          const shouldRetry =\n            retry === true ||\n            (typeof retry === 'number' && this.failureCount < retry) ||\n            (typeof retry === 'function' && retry(this.failureCount, error))\n\n          if (cancelRetry || !shouldRetry) {\n            // We are done if the query does not need to be retried\n            reject(error)\n            return\n          }\n\n          this.failureCount++\n\n          // Notify on fail\n          config.onFail?.(this.failureCount, error)\n\n          // Delay\n          sleep(delay)\n            // Pause if the document is not visible or when the device is offline\n            .then(() => {\n              if (!focusManager.isFocused() || !onlineManager.isOnline()) {\n                return pause()\n              }\n            })\n            .then(() => {\n              if (cancelRetry) {\n                reject(error)\n              } else {\n                run()\n              }\n            })\n        })\n    }\n\n    // Start loop\n    run()\n  }\n}\n","import { scheduleMicrotask } from './utils'\n\n// TYPES\n\ntype NotifyCallback = () => void\n\ntype NotifyFunction = (callback: () => void) => void\n\ntype BatchNotifyFunction = (callback: () => void) => void\n\n// CLASS\n\nclass NotifyManager {\n  private queue: NotifyCallback[]\n  private transactions: number\n  private notifyFn: NotifyFunction\n  private batchNotifyFn: BatchNotifyFunction\n\n  constructor() {\n    this.queue = []\n    this.transactions = 0\n\n    this.notifyFn = (callback: () => void) => {\n      callback()\n    }\n\n    this.batchNotifyFn = (callback: () => void) => {\n      callback()\n    }\n  }\n\n  batch<T>(callback: () => T): T {\n    this.transactions++\n    const result = callback()\n    this.transactions--\n    if (!this.transactions) {\n      this.flush()\n    }\n    return result\n  }\n\n  schedule(callback: NotifyCallback): void {\n    if (this.transactions) {\n      this.queue.push(callback)\n    } else {\n      scheduleMicrotask(() => {\n        this.notifyFn(callback)\n      })\n    }\n  }\n\n  /**\n   * All calls to the wrapped function will be batched.\n   */\n  batchCalls<T extends Function>(callback: T): T {\n    return ((...args: any[]) => {\n      this.schedule(() => {\n        callback(...args)\n      })\n    }) as any\n  }\n\n  flush(): void {\n    const queue = this.queue\n    this.queue = []\n    if (queue.length) {\n      scheduleMicrotask(() => {\n        this.batchNotifyFn(() => {\n          queue.forEach(callback => {\n            this.notifyFn(callback)\n          })\n        })\n      })\n    }\n  }\n\n  /**\n   * Use this method to set a custom notify function.\n   * This can be used to for example wrap notifications with `React.act` while running tests.\n   */\n  setNotifyFunction(fn: NotifyFunction) {\n    this.notifyFn = fn\n  }\n\n  /**\n   * Use this method to set a custom function to batch notifications together into a single tick.\n   * By default React Query will use the batch function provided by ReactDOM or React Native.\n   */\n  setBatchNotifyFunction(fn: BatchNotifyFunction) {\n    this.batchNotifyFn = fn\n  }\n}\n\n// SINGLETON\n\nexport const notifyManager = new NotifyManager()\n","import { noop } from './utils'\n\n// TYPES\n\nexport interface Logger {\n  log: LogFunction\n  warn: LogFunction\n  error: LogFunction\n}\n\ntype LogFunction = (...args: any[]) => void\n\n// FUNCTIONS\n\nlet logger: Logger = console || {\n  error: noop,\n  warn: noop,\n  log: noop,\n}\n\nexport function getLogger(): Logger {\n  return logger\n}\n\nexport function setLogger(newLogger: Logger) {\n  logger = newLogger\n}\n","import {\n  Updater,\n  ensureArray,\n  functionalUpdate,\n  isValidTimeout,\n  noop,\n  replaceEqualDeep,\n  timeUntilStale,\n} from './utils'\nimport type {\n  InitialDataFunction,\n  QueryKey,\n  QueryOptions,\n  QueryStatus,\n  QueryFunctionContext,\n} from './types'\nimport type { QueryCache } from './queryCache'\nimport type { QueryObserver } from './queryObserver'\nimport { notifyManager } from './notifyManager'\nimport { getLogger } from './logger'\nimport { Retryer, CancelOptions, isCancelledError } from './retryer'\n\n// TYPES\n\ninterface QueryConfig<TQueryFnData, TError, TData> {\n  cache: QueryCache\n  queryKey: QueryKey\n  queryHash: string\n  options?: QueryOptions<TQueryFnData, TError, TData>\n  defaultOptions?: QueryOptions<TQueryFnData, TError, TData>\n  state?: QueryState<TData, TError>\n}\n\nexport interface QueryState<TData = unknown, TError = unknown> {\n  data: TData | undefined\n  dataUpdateCount: number\n  dataUpdatedAt: number\n  error: TError | null\n  errorUpdateCount: number\n  errorUpdatedAt: number\n  fetchFailureCount: number\n  fetchMeta: any\n  isFetching: boolean\n  isInvalidated: boolean\n  isPaused: boolean\n  status: QueryStatus\n}\n\nexport interface FetchContext<TQueryFnData, TError, TData> {\n  fetchFn: () => unknown | Promise<unknown>\n  fetchOptions?: FetchOptions\n  options: QueryOptions<TQueryFnData, TError, TData>\n  queryKey: QueryKey\n  state: QueryState<TData, TError>\n}\n\nexport interface QueryBehavior<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData\n> {\n  onFetch: (context: FetchContext<TQueryFnData, TError, TData>) => void\n}\n\nexport interface FetchOptions {\n  cancelRefetch?: boolean\n  meta?: any\n}\n\nexport interface SetDataOptions {\n  updatedAt?: number\n}\n\ninterface FailedAction {\n  type: 'failed'\n}\n\ninterface FetchAction {\n  type: 'fetch'\n  meta?: any\n}\n\ninterface SuccessAction<TData> {\n  data: TData | undefined\n  type: 'success'\n  dataUpdatedAt?: number\n}\n\ninterface ErrorAction<TError> {\n  type: 'error'\n  error: TError\n}\n\ninterface InvalidateAction {\n  type: 'invalidate'\n}\n\ninterface PauseAction {\n  type: 'pause'\n}\n\ninterface ContinueAction {\n  type: 'continue'\n}\n\ninterface SetStateAction<TData, TError> {\n  type: 'setState'\n  state: QueryState<TData, TError>\n}\n\nexport type Action<TData, TError> =\n  | ContinueAction\n  | ErrorAction<TError>\n  | FailedAction\n  | FetchAction\n  | InvalidateAction\n  | PauseAction\n  | SetStateAction<TData, TError>\n  | SuccessAction<TData>\n\n// CLASS\n\nexport class Query<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData\n> {\n  queryKey: QueryKey\n  queryHash: string\n  options!: QueryOptions<TQueryFnData, TError, TData>\n  initialState: QueryState<TData, TError>\n  revertState?: QueryState<TData, TError>\n  state: QueryState<TData, TError>\n  cacheTime!: number\n\n  private cache: QueryCache\n  private promise?: Promise<TData>\n  private gcTimeout?: number\n  private retryer?: Retryer<TData, TError>\n  private observers: QueryObserver<any, any, any, any>[]\n  private defaultOptions?: QueryOptions<TQueryFnData, TError, TData>\n\n  constructor(config: QueryConfig<TQueryFnData, TError, TData>) {\n    this.defaultOptions = config.defaultOptions\n    this.setOptions(config.options)\n    this.observers = []\n    this.cache = config.cache\n    this.queryKey = config.queryKey\n    this.queryHash = config.queryHash\n    this.initialState = config.state || this.getDefaultState(this.options)\n    this.state = this.initialState\n    this.scheduleGc()\n  }\n\n  private setOptions(\n    options?: QueryOptions<TQueryFnData, TError, TData>\n  ): void {\n    this.options = { ...this.defaultOptions, ...options }\n\n    // Default to 5 minutes if not cache time is set\n    this.cacheTime = Math.max(\n      this.cacheTime || 0,\n      this.options.cacheTime ?? 5 * 60 * 1000\n    )\n  }\n\n  setDefaultOptions(options: QueryOptions<TQueryFnData, TError, TData>): void {\n    this.defaultOptions = options\n  }\n\n  private scheduleGc(): void {\n    this.clearGcTimeout()\n\n    if (isValidTimeout(this.cacheTime)) {\n      this.gcTimeout = setTimeout(() => {\n        this.optionalRemove()\n      }, this.cacheTime)\n    }\n  }\n\n  private clearGcTimeout() {\n    clearTimeout(this.gcTimeout)\n    this.gcTimeout = undefined\n  }\n\n  private optionalRemove() {\n    if (!this.observers.length && !this.state.isFetching) {\n      this.cache.remove(this)\n    }\n  }\n\n  setData(\n    updater: Updater<TData | undefined, TData>,\n    options?: SetDataOptions\n  ): TData {\n    const prevData = this.state.data\n\n    // Get the new data\n    let data = functionalUpdate(updater, prevData)\n\n    // Use prev data if an isDataEqual function is defined and returns `true`\n    if (this.options.isDataEqual?.(prevData, data)) {\n      data = prevData as TData\n    } else if (this.options.structuralSharing !== false) {\n      // Structurally share data between prev and new data if needed\n      data = replaceEqualDeep(prevData, data)\n    }\n\n    // Set data and mark it as cached\n    this.dispatch({\n      data,\n      type: 'success',\n      dataUpdatedAt: options?.updatedAt,\n    })\n\n    return data\n  }\n\n  setState(state: QueryState<TData, TError>): void {\n    this.dispatch({ type: 'setState', state })\n  }\n\n  cancel(options?: CancelOptions): Promise<void> {\n    const promise = this.promise\n    this.retryer?.cancel(options)\n    return promise ? promise.then(noop).catch(noop) : Promise.resolve()\n  }\n\n  destroy(): void {\n    this.clearGcTimeout()\n    this.cancel({ silent: true })\n  }\n\n  reset(): void {\n    this.destroy()\n    this.setState(this.initialState)\n  }\n\n  isActive(): boolean {\n    return this.observers.some(observer => observer.options.enabled !== false)\n  }\n\n  isFetching(): boolean {\n    return this.state.isFetching\n  }\n\n  isStale(): boolean {\n    return (\n      this.state.isInvalidated ||\n      !this.state.dataUpdatedAt ||\n      this.observers.some(observer => observer.getCurrentResult().isStale)\n    )\n  }\n\n  isStaleByTime(staleTime = 0): boolean {\n    return (\n      this.state.isInvalidated ||\n      !this.state.dataUpdatedAt ||\n      !timeUntilStale(this.state.dataUpdatedAt, staleTime)\n    )\n  }\n\n  onFocus(): void {\n    const observer = this.observers.find(x => x.shouldFetchOnWindowFocus())\n\n    if (observer) {\n      observer.refetch()\n    }\n\n    // Continue fetch if currently paused\n    this.retryer?.continue()\n  }\n\n  onOnline(): void {\n    const observer = this.observers.find(x => x.shouldFetchOnReconnect())\n\n    if (observer) {\n      observer.refetch()\n    }\n\n    // Continue fetch if currently paused\n    this.retryer?.continue()\n  }\n\n  addObserver(observer: QueryObserver<any, any, any, any>): void {\n    if (this.observers.indexOf(observer) === -1) {\n      this.observers.push(observer)\n\n      // Stop the query from being garbage collected\n      this.clearGcTimeout()\n\n      this.cache.notify(this)\n    }\n  }\n\n  removeObserver(observer: QueryObserver<any, any, any, any>): void {\n    if (this.observers.indexOf(observer) !== -1) {\n      this.observers = this.observers.filter(x => x !== observer)\n\n      if (!this.observers.length) {\n        // If the transport layer does not support cancellation\n        // we'll let the query continue so the result can be cached\n        if (this.retryer) {\n          if (this.retryer.isTransportCancelable) {\n            this.retryer.cancel({ revert: true })\n          } else {\n            this.retryer.cancelRetry()\n          }\n        }\n\n        if (this.cacheTime) {\n          this.scheduleGc()\n        } else {\n          this.cache.remove(this)\n        }\n      }\n\n      this.cache.notify(this)\n    }\n  }\n\n  invalidate(): void {\n    if (!this.state.isInvalidated) {\n      this.dispatch({ type: 'invalidate' })\n    }\n  }\n\n  fetch(\n    options?: QueryOptions<TQueryFnData, TError, TData>,\n    fetchOptions?: FetchOptions\n  ): Promise<TData> {\n    if (this.state.isFetching) {\n      if (this.state.dataUpdatedAt && fetchOptions?.cancelRefetch) {\n        // Silently cancel current fetch if the user wants to cancel refetches\n        this.cancel({ silent: true })\n      } else if (this.promise) {\n        // Return current promise if we are already fetching\n        return this.promise\n      }\n    }\n\n    // Update config if passed, otherwise the config from the last execution is used\n    if (options) {\n      this.setOptions(options)\n    }\n\n    // Use the options from the first observer with a query function if no function is found.\n    // This can happen when the query is hydrated or created with setQueryData.\n    if (!this.options.queryFn) {\n      const observer = this.observers.find(x => x.options.queryFn)\n      if (observer) {\n        this.setOptions(observer.options)\n      }\n    }\n\n    // Create query function context\n    const queryKey = ensureArray(this.queryKey)\n    const queryFnContext: QueryFunctionContext = {\n      queryKey,\n      pageParam: undefined,\n    }\n\n    // Create fetch function\n    const fetchFn = () =>\n      this.options.queryFn\n        ? this.options.queryFn(queryFnContext)\n        : Promise.reject('Missing queryFn')\n\n    // Trigger behavior hook\n    const context: FetchContext<TQueryFnData, TError, TData> = {\n      fetchOptions,\n      options: this.options,\n      queryKey,\n      state: this.state,\n      fetchFn,\n    }\n\n    if (this.options.behavior?.onFetch) {\n      this.options.behavior?.onFetch(context)\n    }\n\n    // Store state in case the current fetch needs to be reverted\n    this.revertState = this.state\n\n    // Set to fetching state if not already in it\n    if (\n      !this.state.isFetching ||\n      this.state.fetchMeta !== context.fetchOptions?.meta\n    ) {\n      this.dispatch({ type: 'fetch', meta: context.fetchOptions?.meta })\n    }\n\n    // Try to fetch the data\n    this.retryer = new Retryer({\n      fn: context.fetchFn as () => TData,\n      onSuccess: data => {\n        this.setData(data as TData)\n\n        // Remove query after fetching if cache time is 0\n        if (this.cacheTime === 0) {\n          this.optionalRemove()\n        }\n      },\n      onError: error => {\n        // Optimistically update state if needed\n        if (!(isCancelledError(error) && error.silent)) {\n          this.dispatch({\n            type: 'error',\n            error: error as TError,\n          })\n        }\n\n        if (!isCancelledError(error)) {\n          // Notify cache callback\n          if (this.cache.config.onError) {\n            this.cache.config.onError(error, this as Query)\n          }\n\n          // Log error\n          getLogger().error(error)\n        }\n\n        // Remove query after fetching if cache time is 0\n        if (this.cacheTime === 0) {\n          this.optionalRemove()\n        }\n      },\n      onFail: () => {\n        this.dispatch({ type: 'failed' })\n      },\n      onPause: () => {\n        this.dispatch({ type: 'pause' })\n      },\n      onContinue: () => {\n        this.dispatch({ type: 'continue' })\n      },\n      retry: context.options.retry,\n      retryDelay: context.options.retryDelay,\n    })\n\n    this.promise = this.retryer.promise\n\n    return this.promise\n  }\n\n  private dispatch(action: Action<TData, TError>): void {\n    this.state = this.reducer(this.state, action)\n\n    notifyManager.batch(() => {\n      this.observers.forEach(observer => {\n        observer.onQueryUpdate(action)\n      })\n\n      this.cache.notify(this)\n    })\n  }\n\n  protected getDefaultState(\n    options: QueryOptions<TQueryFnData, TError, TData>\n  ): QueryState<TData, TError> {\n    const data =\n      typeof options.initialData === 'function'\n        ? (options.initialData as InitialDataFunction<TData>)()\n        : options.initialData\n\n    const hasInitialData = typeof options.initialData !== 'undefined'\n\n    const initialDataUpdatedAt = hasInitialData\n      ? typeof options.initialDataUpdatedAt === 'function'\n        ? (options.initialDataUpdatedAt as () => number | undefined)()\n        : options.initialDataUpdatedAt\n      : 0\n\n    const hasData = typeof data !== 'undefined'\n\n    return {\n      data,\n      dataUpdateCount: 0,\n      dataUpdatedAt: hasData ? initialDataUpdatedAt ?? Date.now() : 0,\n      error: null,\n      errorUpdateCount: 0,\n      errorUpdatedAt: 0,\n      fetchFailureCount: 0,\n      fetchMeta: null,\n      isFetching: false,\n      isInvalidated: false,\n      isPaused: false,\n      status: hasData ? 'success' : 'idle',\n    }\n  }\n\n  protected reducer(\n    state: QueryState<TData, TError>,\n    action: Action<TData, TError>\n  ): QueryState<TData, TError> {\n    switch (action.type) {\n      case 'failed':\n        return {\n          ...state,\n          fetchFailureCount: state.fetchFailureCount + 1,\n        }\n      case 'pause':\n        return {\n          ...state,\n          isPaused: true,\n        }\n      case 'continue':\n        return {\n          ...state,\n          isPaused: false,\n        }\n      case 'fetch':\n        return {\n          ...state,\n          fetchFailureCount: 0,\n          fetchMeta: action.meta ?? null,\n          isFetching: true,\n          isPaused: false,\n          status: !state.dataUpdatedAt ? 'loading' : state.status,\n        }\n      case 'success':\n        return {\n          ...state,\n          data: action.data,\n          dataUpdateCount: state.dataUpdateCount + 1,\n          dataUpdatedAt: action.dataUpdatedAt ?? Date.now(),\n          error: null,\n          fetchFailureCount: 0,\n          isFetching: false,\n          isInvalidated: false,\n          isPaused: false,\n          status: 'success',\n        }\n      case 'error':\n        const error = action.error as unknown\n\n        if (isCancelledError(error) && error.revert && this.revertState) {\n          return { ...this.revertState }\n        }\n\n        return {\n          ...state,\n          error: error as TError,\n          errorUpdateCount: state.errorUpdateCount + 1,\n          errorUpdatedAt: Date.now(),\n          fetchFailureCount: state.fetchFailureCount + 1,\n          isFetching: false,\n          isPaused: false,\n          status: 'error',\n        }\n      case 'invalidate':\n        return {\n          ...state,\n          isInvalidated: true,\n        }\n      case 'setState':\n        return {\n          ...state,\n          ...action.state,\n        }\n      default:\n        return state\n    }\n  }\n}\n","import {\n  QueryFilters,\n  getQueryKeyHashFn,\n  matchQuery,\n  parseFilterArgs,\n} from './utils'\nimport { Query, QueryState } from './query'\nimport type { QueryKey, QueryOptions } from './types'\nimport { notifyManager } from './notifyManager'\nimport type { QueryClient } from './queryClient'\nimport { Subscribable } from './subscribable'\n\n// TYPES\n\ninterface QueryCacheConfig {\n  onError?: (error: unknown, query: Query<unknown, unknown, unknown>) => void\n}\n\ninterface QueryHashMap {\n  [hash: string]: Query<any, any>\n}\n\ntype QueryCacheListener = (query?: Query) => void\n\n// CLASS\n\nexport class QueryCache extends Subscribable<QueryCacheListener> {\n  config: QueryCacheConfig\n\n  private queries: Query<any, any>[]\n  private queriesMap: QueryHashMap\n\n  constructor(config?: QueryCacheConfig) {\n    super()\n    this.config = config || {}\n    this.queries = []\n    this.queriesMap = {}\n  }\n\n  build<TQueryFnData, TError, TData>(\n    client: QueryClient,\n    options: QueryOptions<TQueryFnData, TError, TData>,\n    state?: QueryState<TData, TError>\n  ): Query<TQueryFnData, TError, TData> {\n    const queryKey = options.queryKey!\n    const queryHash = options.queryHash ?? getQueryKeyHashFn(options)(queryKey)\n    let query = this.get<TQueryFnData, TError, TData>(queryHash)\n\n    if (!query) {\n      query = new Query({\n        cache: this,\n        queryKey,\n        queryHash,\n        options: client.defaultQueryOptions(options),\n        state,\n        defaultOptions: client.getQueryDefaults(queryKey),\n      })\n      this.add(query)\n    }\n\n    return query\n  }\n\n  add(query: Query<any, any>): void {\n    if (!this.queriesMap[query.queryHash]) {\n      this.queriesMap[query.queryHash] = query\n      this.queries.push(query)\n      this.notify(query)\n    }\n  }\n\n  remove(query: Query<any, any>): void {\n    const queryInMap = this.queriesMap[query.queryHash]\n\n    if (queryInMap) {\n      query.destroy()\n\n      this.queries = this.queries.filter(x => x !== query)\n\n      if (queryInMap === query) {\n        delete this.queriesMap[query.queryHash]\n      }\n\n      this.notify(query)\n    }\n  }\n\n  clear(): void {\n    notifyManager.batch(() => {\n      this.queries.forEach(query => {\n        this.remove(query)\n      })\n    })\n  }\n\n  get<TQueryFnData = unknown, TError = unknown, TData = TQueryFnData>(\n    queryHash: string\n  ): Query<TQueryFnData, TError, TData> | undefined {\n    return this.queriesMap[queryHash]\n  }\n\n  getAll(): Query[] {\n    return this.queries\n  }\n\n  find<TQueryFnData = unknown, TError = unknown, TData = TQueryFnData>(\n    arg1: QueryKey,\n    arg2?: QueryFilters\n  ): Query<TQueryFnData, TError, TData> | undefined {\n    const [filters] = parseFilterArgs(arg1, arg2)\n\n    if (typeof filters.exact === 'undefined') {\n      filters.exact = true\n    }\n\n    return this.queries.find(query => matchQuery(filters, query))\n  }\n\n  findAll(queryKey?: QueryKey, filters?: QueryFilters): Query[]\n  findAll(filters?: QueryFilters): Query[]\n  findAll(arg1?: QueryKey | QueryFilters, arg2?: QueryFilters): Query[]\n  findAll(arg1?: QueryKey | QueryFilters, arg2?: QueryFilters): Query[] {\n    const [filters] = parseFilterArgs(arg1, arg2)\n    return filters\n      ? this.queries.filter(query => matchQuery(filters, query))\n      : this.queries\n  }\n\n  notify(query?: Query<any, any>) {\n    notifyManager.batch(() => {\n      this.listeners.forEach(listener => {\n        listener(query)\n      })\n    })\n  }\n\n  onFocus(): void {\n    notifyManager.batch(() => {\n      this.queries.forEach(query => {\n        query.onFocus()\n      })\n    })\n  }\n\n  onOnline(): void {\n    notifyManager.batch(() => {\n      this.queries.forEach(query => {\n        query.onOnline()\n      })\n    })\n  }\n}\n","import type { MutationOptions, MutationStatus } from './types'\nimport type { MutationCache } from './mutationCache'\nimport type { MutationObserver } from './mutationObserver'\nimport { getLogger } from './logger'\nimport { notifyManager } from './notifyManager'\nimport { Retryer } from './retryer'\nimport { noop } from './utils'\n\n// TYPES\n\ninterface MutationConfig<TData, TError, TVariables, TContext> {\n  mutationId: number\n  mutationCache: MutationCache\n  options: MutationOptions<TData, TError, TVariables, TContext>\n  defaultOptions?: MutationOptions<TData, TError, TVariables, TContext>\n  state?: MutationState<TData, TError, TVariables, TContext>\n}\n\nexport interface MutationState<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown\n> {\n  context: TContext | undefined\n  data: TData | undefined\n  error: TError | null\n  failureCount: number\n  isPaused: boolean\n  status: MutationStatus\n  variables: TVariables | undefined\n}\n\ninterface FailedAction {\n  type: 'failed'\n}\n\ninterface LoadingAction<TVariables, TContext> {\n  type: 'loading'\n  variables?: TVariables\n  context?: TContext\n}\n\ninterface SuccessAction<TData> {\n  type: 'success'\n  data: TData\n}\n\ninterface ErrorAction<TError> {\n  type: 'error'\n  error: TError\n}\n\ninterface PauseAction {\n  type: 'pause'\n}\n\ninterface ContinueAction {\n  type: 'continue'\n}\n\ninterface SetStateAction<TData, TError, TVariables, TContext> {\n  type: 'setState'\n  state: MutationState<TData, TError, TVariables, TContext>\n}\n\nexport type Action<TData, TError, TVariables, TContext> =\n  | ContinueAction\n  | ErrorAction<TError>\n  | FailedAction\n  | LoadingAction<TVariables, TContext>\n  | PauseAction\n  | SetStateAction<TData, TError, TVariables, TContext>\n  | SuccessAction<TData>\n\n// CLASS\n\nexport class Mutation<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown\n> {\n  state: MutationState<TData, TError, TVariables, TContext>\n  options: MutationOptions<TData, TError, TVariables, TContext>\n  mutationId: number\n\n  private observers: MutationObserver<TData, TError, TVariables, TContext>[]\n  private mutationCache: MutationCache\n  private retryer?: Retryer<TData, TError>\n\n  constructor(config: MutationConfig<TData, TError, TVariables, TContext>) {\n    this.options = {\n      ...config.defaultOptions,\n      ...config.options,\n    }\n    this.mutationId = config.mutationId\n    this.mutationCache = config.mutationCache\n    this.observers = []\n    this.state = config.state || getDefaultState()\n  }\n\n  setState(state: MutationState<TData, TError, TVariables, TContext>): void {\n    this.dispatch({ type: 'setState', state })\n  }\n\n  addObserver(observer: MutationObserver<any, any, any, any>): void {\n    if (this.observers.indexOf(observer) === -1) {\n      this.observers.push(observer)\n    }\n  }\n\n  removeObserver(observer: MutationObserver<any, any, any, any>): void {\n    this.observers = this.observers.filter(x => x !== observer)\n  }\n\n  cancel(): Promise<void> {\n    if (this.retryer) {\n      this.retryer.cancel()\n      return this.retryer.promise.then(noop).catch(noop)\n    }\n    return Promise.resolve()\n  }\n\n  continue(): Promise<TData> {\n    if (this.retryer) {\n      this.retryer.continue()\n      return this.retryer.promise\n    }\n    return this.execute()\n  }\n\n  execute(): Promise<TData> {\n    let data: TData\n\n    const restored = this.state.status === 'loading'\n\n    let promise = Promise.resolve()\n\n    if (!restored) {\n      this.dispatch({ type: 'loading', variables: this.options.variables! })\n      promise = promise\n        .then(() => this.options.onMutate?.(this.state.variables!))\n        .then(context => {\n          if (context !== this.state.context) {\n            this.dispatch({\n              type: 'loading',\n              context,\n              variables: this.state.variables,\n            })\n          }\n        })\n    }\n\n    return promise\n      .then(() => this.executeMutation())\n      .then(result => {\n        data = result\n      })\n      .then(() =>\n        this.options.onSuccess?.(\n          data,\n          this.state.variables!,\n          this.state.context!\n        )\n      )\n      .then(() =>\n        this.options.onSettled?.(\n          data,\n          null,\n          this.state.variables!,\n          this.state.context\n        )\n      )\n      .then(() => {\n        this.dispatch({ type: 'success', data })\n        return data\n      })\n      .catch(error => {\n        // Notify cache callback\n        if (this.mutationCache.config.onError) {\n          this.mutationCache.config.onError(\n            error,\n            this.state.variables,\n            this.state.context,\n            this as Mutation<unknown, unknown, unknown, unknown>\n          )\n        }\n\n        // Log error\n        getLogger().error(error)\n\n        return Promise.resolve()\n          .then(() =>\n            this.options.onError?.(\n              error,\n              this.state.variables!,\n              this.state.context\n            )\n          )\n          .then(() =>\n            this.options.onSettled?.(\n              undefined,\n              error,\n              this.state.variables!,\n              this.state.context\n            )\n          )\n          .then(() => {\n            this.dispatch({ type: 'error', error })\n            throw error\n          })\n      })\n  }\n\n  private executeMutation(): Promise<TData> {\n    this.retryer = new Retryer({\n      fn: () => {\n        if (!this.options.mutationFn) {\n          return Promise.reject('No mutationFn found')\n        }\n        return this.options.mutationFn(this.state.variables!)\n      },\n      onFail: () => {\n        this.dispatch({ type: 'failed' })\n      },\n      onPause: () => {\n        this.dispatch({ type: 'pause' })\n      },\n      onContinue: () => {\n        this.dispatch({ type: 'continue' })\n      },\n      retry: this.options.retry ?? 0,\n      retryDelay: this.options.retryDelay,\n    })\n\n    return this.retryer.promise\n  }\n\n  private dispatch(action: Action<TData, TError, TVariables, TContext>): void {\n    this.state = reducer(this.state, action)\n\n    notifyManager.batch(() => {\n      this.observers.forEach(observer => {\n        observer.onMutationUpdate(action)\n      })\n      this.mutationCache.notify(this)\n    })\n  }\n}\n\nexport function getDefaultState<\n  TData,\n  TError,\n  TVariables,\n  TContext\n>(): MutationState<TData, TError, TVariables, TContext> {\n  return {\n    context: undefined,\n    data: undefined,\n    error: null,\n    failureCount: 0,\n    isPaused: false,\n    status: 'idle',\n    variables: undefined,\n  }\n}\n\nfunction reducer<TData, TError, TVariables, TContext>(\n  state: MutationState<TData, TError, TVariables, TContext>,\n  action: Action<TData, TError, TVariables, TContext>\n): MutationState<TData, TError, TVariables, TContext> {\n  switch (action.type) {\n    case 'failed':\n      return {\n        ...state,\n        failureCount: state.failureCount + 1,\n      }\n    case 'pause':\n      return {\n        ...state,\n        isPaused: true,\n      }\n    case 'continue':\n      return {\n        ...state,\n        isPaused: false,\n      }\n    case 'loading':\n      return {\n        ...state,\n        context: action.context,\n        data: undefined,\n        error: null,\n        isPaused: false,\n        status: 'loading',\n        variables: action.variables,\n      }\n    case 'success':\n      return {\n        ...state,\n        data: action.data,\n        error: null,\n        status: 'success',\n        isPaused: false,\n      }\n    case 'error':\n      return {\n        ...state,\n        data: undefined,\n        error: action.error,\n        failureCount: state.failureCount + 1,\n        isPaused: false,\n        status: 'error',\n      }\n    case 'setState':\n      return {\n        ...state,\n        ...action.state,\n      }\n    default:\n      return state\n  }\n}\n","import type { MutationOptions } from './types'\nimport type { QueryClient } from './queryClient'\nimport { notifyManager } from './notifyManager'\nimport { Mutation, MutationState } from './mutation'\nimport { noop } from './utils'\nimport { Subscribable } from './subscribable'\n\n// TYPES\n\ninterface MutationCacheConfig {\n  onError?: (\n    error: unknown,\n    variables: unknown,\n    context: unknown,\n    mutation: Mutation<unknown, unknown, unknown, unknown>\n  ) => void\n}\n\ntype MutationCacheListener = (mutation?: Mutation) => void\n\n// CLASS\n\nexport class MutationCache extends Subscribable<MutationCacheListener> {\n  config: MutationCacheConfig\n\n  private mutations: Mutation<any, any, any, any>[]\n  private mutationId: number\n\n  constructor(config?: MutationCacheConfig) {\n    super()\n    this.config = config || {}\n    this.mutations = []\n    this.mutationId = 0\n  }\n\n  build<TData, TError, TVariables, TContext>(\n    client: QueryClient,\n    options: MutationOptions<TData, TError, TVariables, TContext>,\n    state?: MutationState<TData, TError, TVariables, TContext>\n  ): Mutation<TData, TError, TVariables, TContext> {\n    const mutation = new Mutation({\n      mutationCache: this,\n      mutationId: ++this.mutationId,\n      options: client.defaultMutationOptions(options),\n      state,\n      defaultOptions: options.mutationKey\n        ? client.getMutationDefaults(options.mutationKey)\n        : undefined,\n    })\n\n    this.add(mutation)\n\n    return mutation\n  }\n\n  add(mutation: Mutation<any, any, any, any>): void {\n    this.mutations.push(mutation)\n    this.notify(mutation)\n  }\n\n  remove(mutation: Mutation<any, any, any, any>): void {\n    this.mutations = this.mutations.filter(x => x !== mutation)\n    mutation.cancel()\n    this.notify(mutation)\n  }\n\n  clear(): void {\n    notifyManager.batch(() => {\n      this.mutations.forEach(mutation => {\n        this.remove(mutation)\n      })\n    })\n  }\n\n  getAll(): Mutation[] {\n    return this.mutations\n  }\n\n  notify(mutation?: Mutation<any, any, any, any>) {\n    notifyManager.batch(() => {\n      this.listeners.forEach(listener => {\n        listener(mutation)\n      })\n    })\n  }\n\n  onFocus(): void {\n    this.resumePausedMutations()\n  }\n\n  onOnline(): void {\n    this.resumePausedMutations()\n  }\n\n  resumePausedMutations(): Promise<void> {\n    const pausedMutations = this.mutations.filter(x => x.state.isPaused)\n    return notifyManager.batch(() =>\n      pausedMutations.reduce(\n        (promise, mutation) =>\n          promise.then(() => mutation.continue().catch(noop)),\n        Promise.resolve()\n      )\n    )\n  }\n}\n","import type { QueryBehavior } from './query'\nimport { isCancelable } from './retryer'\nimport type { InfiniteData, QueryFunctionContext, QueryOptions } from './types'\n\nexport function infiniteQueryBehavior<\n  TQueryFnData,\n  TError,\n  TData\n>(): QueryBehavior<TQueryFnData, TError, InfiniteData<TData>> {\n  return {\n    onFetch: context => {\n      context.fetchFn = () => {\n        const fetchMore = context.fetchOptions?.meta?.fetchMore\n        const pageParam = fetchMore?.pageParam\n        const isFetchingNextPage = fetchMore?.direction === 'forward'\n        const isFetchingPreviousPage = fetchMore?.direction === 'backward'\n        const oldPages = context.state.data?.pages || []\n        const oldPageParams = context.state.data?.pageParams || []\n        let newPageParams = oldPageParams\n        let cancelled = false\n\n        // Get query function\n        const queryFn =\n          context.options.queryFn || (() => Promise.reject('Missing queryFn'))\n\n        // Create function to fetch a page\n        const fetchPage = (\n          pages: unknown[],\n          manual?: boolean,\n          param?: unknown,\n          previous?: boolean\n        ): Promise<unknown[]> => {\n          if (cancelled) {\n            return Promise.reject('Cancelled')\n          }\n\n          if (typeof param === 'undefined' && !manual && pages.length) {\n            return Promise.resolve(pages)\n          }\n\n          const queryFnContext: QueryFunctionContext = {\n            queryKey: context.queryKey,\n            pageParam: param,\n          }\n\n          const queryFnResult = queryFn(queryFnContext)\n\n          const promise = Promise.resolve(queryFnResult).then(page => {\n            newPageParams = previous\n              ? [param, ...newPageParams]\n              : [...newPageParams, param]\n            return previous ? [page, ...pages] : [...pages, page]\n          })\n\n          if (isCancelable(queryFnResult)) {\n            const promiseAsAny = promise as any\n            promiseAsAny.cancel = queryFnResult.cancel\n          }\n\n          return promise\n        }\n\n        let promise: Promise<unknown[]>\n\n        // Fetch first page?\n        if (!oldPages.length) {\n          promise = fetchPage([])\n        }\n\n        // Fetch next page?\n        else if (isFetchingNextPage) {\n          const manual = typeof pageParam !== 'undefined'\n          const param = manual\n            ? pageParam\n            : getNextPageParam(context.options, oldPages)\n          promise = fetchPage(oldPages, manual, param)\n        }\n\n        // Fetch previous page?\n        else if (isFetchingPreviousPage) {\n          const manual = typeof pageParam !== 'undefined'\n          const param = manual\n            ? pageParam\n            : getPreviousPageParam(context.options, oldPages)\n          promise = fetchPage(oldPages, manual, param, true)\n        }\n\n        // Refetch pages\n        else {\n          newPageParams = []\n\n          const manual = typeof context.options.getNextPageParam === 'undefined'\n\n          // Fetch first page\n          promise = fetchPage([], manual, oldPageParams[0])\n\n          // Fetch remaining pages\n          for (let i = 1; i < oldPages.length; i++) {\n            promise = promise.then(pages => {\n              const param = manual\n                ? oldPageParams[i]\n                : getNextPageParam(context.options, pages)\n              return fetchPage(pages, manual, param)\n            })\n          }\n        }\n\n        const finalPromise = promise.then(pages => ({\n          pages,\n          pageParams: newPageParams,\n        }))\n\n        const finalPromiseAsAny = finalPromise as any\n\n        finalPromiseAsAny.cancel = () => {\n          cancelled = true\n          if (isCancelable(promise)) {\n            promise.cancel()\n          }\n        }\n\n        return finalPromise\n      }\n    },\n  }\n}\n\nexport function getNextPageParam(\n  options: QueryOptions<any, any>,\n  pages: unknown[]\n): unknown | undefined {\n  return options.getNextPageParam?.(pages[pages.length - 1], pages)\n}\n\nexport function getPreviousPageParam(\n  options: QueryOptions<any, any>,\n  pages: unknown[]\n): unknown | undefined {\n  return options.getPreviousPageParam?.(pages[0], pages)\n}\n\n/**\n * Checks if there is a next page.\n * Returns `undefined` if it cannot be determined.\n */\nexport function hasNextPage(\n  options: QueryOptions<any, any>,\n  pages?: unknown\n): boolean | undefined {\n  if (options.getNextPageParam && Array.isArray(pages)) {\n    const nextPageParam = getNextPageParam(options, pages)\n    return (\n      typeof nextPageParam !== 'undefined' &&\n      nextPageParam !== null &&\n      nextPageParam !== false\n    )\n  }\n}\n\n/**\n * Checks if there is a previous page.\n * Returns `undefined` if it cannot be determined.\n */\nexport function hasPreviousPage(\n  options: QueryOptions<any, any>,\n  pages?: unknown\n): boolean | undefined {\n  if (options.getPreviousPageParam && Array.isArray(pages)) {\n    const previousPageParam = getPreviousPageParam(options, pages)\n    return (\n      typeof previousPageParam !== 'undefined' &&\n      previousPageParam !== null &&\n      previousPageParam !== false\n    )\n  }\n}\n","import {\n  QueryFilters,\n  Updater,\n  hashQueryKey,\n  noop,\n  parseFilterArgs,\n  parseQueryArgs,\n  partialMatchKey,\n  getQueryKeyHashFn,\n} from './utils'\nimport type {\n  DefaultOptions,\n  FetchInfiniteQueryOptions,\n  FetchQueryOptions,\n  InfiniteData,\n  InvalidateOptions,\n  InvalidateQueryFilters,\n  MutationKey,\n  MutationObserverOptions,\n  MutationOptions,\n  QueryFunction,\n  QueryKey,\n  QueryObserverOptions,\n  QueryOptions,\n  RefetchOptions,\n  ResetOptions,\n} from './types'\nimport type { QueryState, SetDataOptions } from './query'\nimport { QueryCache } from './queryCache'\nimport { MutationCache } from './mutationCache'\nimport { focusManager } from './focusManager'\nimport { onlineManager } from './onlineManager'\nimport { notifyManager } from './notifyManager'\nimport { CancelOptions } from './retryer'\nimport { infiniteQueryBehavior } from './infiniteQueryBehavior'\n\n// TYPES\n\ninterface QueryClientConfig {\n  queryCache?: QueryCache\n  mutationCache?: MutationCache\n  defaultOptions?: DefaultOptions\n}\n\ninterface QueryDefaults {\n  queryKey: QueryKey\n  defaultOptions: QueryOptions<any, any, any>\n}\n\ninterface MutationDefaults {\n  mutationKey: MutationKey\n  defaultOptions: MutationOptions<any, any, any, any>\n}\n\n// CLASS\n\nexport class QueryClient {\n  private queryCache: QueryCache\n  private mutationCache: MutationCache\n  private defaultOptions: DefaultOptions\n  private queryDefaults: QueryDefaults[]\n  private mutationDefaults: MutationDefaults[]\n  private unsubscribeFocus?: () => void\n  private unsubscribeOnline?: () => void\n\n  constructor(config: QueryClientConfig = {}) {\n    this.queryCache = config.queryCache || new QueryCache()\n    this.mutationCache = config.mutationCache || new MutationCache()\n    this.defaultOptions = config.defaultOptions || {}\n    this.queryDefaults = []\n    this.mutationDefaults = []\n  }\n\n  mount(): void {\n    this.unsubscribeFocus = focusManager.subscribe(() => {\n      if (focusManager.isFocused() && onlineManager.isOnline()) {\n        this.mutationCache.onFocus()\n        this.queryCache.onFocus()\n      }\n    })\n    this.unsubscribeOnline = onlineManager.subscribe(() => {\n      if (focusManager.isFocused() && onlineManager.isOnline()) {\n        this.mutationCache.onOnline()\n        this.queryCache.onOnline()\n      }\n    })\n  }\n\n  unmount(): void {\n    this.unsubscribeFocus?.()\n    this.unsubscribeOnline?.()\n  }\n\n  isFetching(filters?: QueryFilters): number\n  isFetching(queryKey?: QueryKey, filters?: QueryFilters): number\n  isFetching(arg1?: QueryKey | QueryFilters, arg2?: QueryFilters): number {\n    const [filters] = parseFilterArgs(arg1, arg2)\n    filters.fetching = true\n    return this.queryCache.findAll(filters).length\n  }\n\n  getQueryData<TData = unknown>(\n    queryKey: QueryKey,\n    filters?: QueryFilters\n  ): TData | undefined {\n    return this.queryCache.find<TData>(queryKey, filters)?.state.data\n  }\n\n  setQueryData<TData>(\n    queryKey: QueryKey,\n    updater: Updater<TData | undefined, TData>,\n    options?: SetDataOptions\n  ): TData {\n    const parsedOptions = parseQueryArgs(queryKey)\n    const defaultedOptions = this.defaultQueryOptions(parsedOptions)\n    return this.queryCache\n      .build(this, defaultedOptions)\n      .setData(updater, options)\n  }\n\n  getQueryState<TData = unknown, TError = undefined>(\n    queryKey: QueryKey,\n    filters?: QueryFilters\n  ): QueryState<TData, TError> | undefined {\n    return this.queryCache.find<TData, TError>(queryKey, filters)?.state\n  }\n\n  removeQueries(filters?: QueryFilters): void\n  removeQueries(queryKey?: QueryKey, filters?: QueryFilters): void\n  removeQueries(arg1?: QueryKey | QueryFilters, arg2?: QueryFilters): void {\n    const [filters] = parseFilterArgs(arg1, arg2)\n    const queryCache = this.queryCache\n    notifyManager.batch(() => {\n      queryCache.findAll(filters).forEach(query => {\n        queryCache.remove(query)\n      })\n    })\n  }\n\n  resetQueries(filters?: QueryFilters, options?: ResetOptions): Promise<void>\n  resetQueries(\n    queryKey?: QueryKey,\n    filters?: QueryFilters,\n    options?: ResetOptions\n  ): Promise<void>\n  resetQueries(\n    arg1?: QueryKey | QueryFilters,\n    arg2?: QueryFilters | ResetOptions,\n    arg3?: ResetOptions\n  ): Promise<void> {\n    const [filters, options] = parseFilterArgs(arg1, arg2, arg3)\n    const queryCache = this.queryCache\n\n    const refetchFilters: QueryFilters = {\n      ...filters,\n      active: true,\n    }\n\n    return notifyManager.batch(() => {\n      queryCache.findAll(filters).forEach(query => {\n        query.reset()\n      })\n      return this.refetchQueries(refetchFilters, options)\n    })\n  }\n\n  cancelQueries(filters?: QueryFilters, options?: CancelOptions): Promise<void>\n  cancelQueries(\n    queryKey?: QueryKey,\n    filters?: QueryFilters,\n    options?: CancelOptions\n  ): Promise<void>\n  cancelQueries(\n    arg1?: QueryKey | QueryFilters,\n    arg2?: QueryFilters | CancelOptions,\n    arg3?: CancelOptions\n  ): Promise<void> {\n    const [filters, cancelOptions = {}] = parseFilterArgs(arg1, arg2, arg3)\n\n    if (typeof cancelOptions.revert === 'undefined') {\n      cancelOptions.revert = true\n    }\n\n    const promises = notifyManager.batch(() =>\n      this.queryCache.findAll(filters).map(query => query.cancel(cancelOptions))\n    )\n\n    return Promise.all(promises).then(noop).catch(noop)\n  }\n\n  invalidateQueries(\n    filters?: InvalidateQueryFilters,\n    options?: InvalidateOptions\n  ): Promise<void>\n  invalidateQueries(\n    queryKey?: QueryKey,\n    filters?: InvalidateQueryFilters,\n    options?: InvalidateOptions\n  ): Promise<void>\n  invalidateQueries(\n    arg1?: QueryKey | InvalidateQueryFilters,\n    arg2?: InvalidateQueryFilters | InvalidateOptions,\n    arg3?: InvalidateOptions\n  ): Promise<void> {\n    const [filters, options] = parseFilterArgs(arg1, arg2, arg3)\n\n    const refetchFilters: QueryFilters = {\n      ...filters,\n      active: filters.refetchActive ?? true,\n      inactive: filters.refetchInactive ?? false,\n    }\n\n    return notifyManager.batch(() => {\n      this.queryCache.findAll(filters).forEach(query => {\n        query.invalidate()\n      })\n      return this.refetchQueries(refetchFilters, options)\n    })\n  }\n\n  refetchQueries(\n    filters?: QueryFilters,\n    options?: RefetchOptions\n  ): Promise<void>\n  refetchQueries(\n    queryKey?: QueryKey,\n    filters?: QueryFilters,\n    options?: RefetchOptions\n  ): Promise<void>\n  refetchQueries(\n    arg1?: QueryKey | QueryFilters,\n    arg2?: QueryFilters | RefetchOptions,\n    arg3?: RefetchOptions\n  ): Promise<void> {\n    const [filters, options] = parseFilterArgs(arg1, arg2, arg3)\n\n    const promises = notifyManager.batch(() =>\n      this.queryCache.findAll(filters).map(query => query.fetch())\n    )\n\n    let promise = Promise.all(promises).then(noop)\n\n    if (!options?.throwOnError) {\n      promise = promise.catch(noop)\n    }\n\n    return promise\n  }\n\n  fetchQuery<TQueryFnData = unknown, TError = unknown, TData = TQueryFnData>(\n    options: FetchQueryOptions<TQueryFnData, TError, TData>\n  ): Promise<TData>\n  fetchQuery<TQueryFnData = unknown, TError = unknown, TData = TQueryFnData>(\n    queryKey: QueryKey,\n    options?: FetchQueryOptions<TQueryFnData, TError, TData>\n  ): Promise<TData>\n  fetchQuery<TQueryFnData = unknown, TError = unknown, TData = TQueryFnData>(\n    queryKey: QueryKey,\n    queryFn: QueryFunction<TQueryFnData>,\n    options?: FetchQueryOptions<TQueryFnData, TError, TData>\n  ): Promise<TData>\n  fetchQuery<TQueryFnData, TError, TData = TQueryFnData>(\n    arg1: QueryKey | FetchQueryOptions<TQueryFnData, TError, TData>,\n    arg2?:\n      | QueryFunction<TQueryFnData>\n      | FetchQueryOptions<TQueryFnData, TError, TData>,\n    arg3?: FetchQueryOptions<TQueryFnData, TError, TData>\n  ): Promise<TData> {\n    const parsedOptions = parseQueryArgs(arg1, arg2, arg3)\n    const defaultedOptions = this.defaultQueryOptions(parsedOptions)\n\n    // https://github.com/tannerlinsley/react-query/issues/652\n    if (typeof defaultedOptions.retry === 'undefined') {\n      defaultedOptions.retry = false\n    }\n\n    const query = this.queryCache.build(this, defaultedOptions)\n\n    return query.isStaleByTime(defaultedOptions.staleTime)\n      ? query.fetch(defaultedOptions)\n      : Promise.resolve(query.state.data as TData)\n  }\n\n  prefetchQuery(options: FetchQueryOptions): Promise<void>\n  prefetchQuery(queryKey: QueryKey, options?: FetchQueryOptions): Promise<void>\n  prefetchQuery(\n    queryKey: QueryKey,\n    queryFn: QueryFunction,\n    options?: FetchQueryOptions\n  ): Promise<void>\n  prefetchQuery(\n    arg1: QueryKey | FetchQueryOptions,\n    arg2?: QueryFunction | FetchQueryOptions,\n    arg3?: FetchQueryOptions\n  ): Promise<void> {\n    return this.fetchQuery(arg1 as any, arg2 as any, arg3)\n      .then(noop)\n      .catch(noop)\n  }\n\n  fetchInfiniteQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData\n  >(\n    options: FetchInfiniteQueryOptions<TQueryFnData, TError, TData>\n  ): Promise<InfiniteData<TData>>\n  fetchInfiniteQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData\n  >(\n    queryKey: QueryKey,\n    options?: FetchInfiniteQueryOptions<TQueryFnData, TError, TData>\n  ): Promise<InfiniteData<TData>>\n  fetchInfiniteQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData\n  >(\n    queryKey: QueryKey,\n    queryFn: QueryFunction<TQueryFnData>,\n    options?: FetchInfiniteQueryOptions<TQueryFnData, TError, TData>\n  ): Promise<InfiniteData<TData>>\n  fetchInfiniteQuery<TQueryFnData, TError, TData = TQueryFnData>(\n    arg1: QueryKey | FetchInfiniteQueryOptions<TQueryFnData, TError, TData>,\n    arg2?:\n      | QueryFunction<TQueryFnData>\n      | FetchInfiniteQueryOptions<TQueryFnData, TError, TData>,\n    arg3?: FetchInfiniteQueryOptions<TQueryFnData, TError, TData>\n  ): Promise<InfiniteData<TData>> {\n    const parsedOptions = parseQueryArgs(arg1, arg2, arg3)\n    parsedOptions.behavior = infiniteQueryBehavior<\n      TQueryFnData,\n      TError,\n      TData\n    >()\n    return this.fetchQuery(parsedOptions)\n  }\n\n  prefetchInfiniteQuery(options: FetchInfiniteQueryOptions): Promise<void>\n  prefetchInfiniteQuery(\n    queryKey: QueryKey,\n    options?: FetchInfiniteQueryOptions\n  ): Promise<void>\n  prefetchInfiniteQuery(\n    queryKey: QueryKey,\n    queryFn: QueryFunction,\n    options?: FetchInfiniteQueryOptions\n  ): Promise<void>\n  prefetchInfiniteQuery(\n    arg1: QueryKey | FetchInfiniteQueryOptions,\n    arg2?: QueryFunction | FetchInfiniteQueryOptions,\n    arg3?: FetchInfiniteQueryOptions\n  ): Promise<void> {\n    return this.fetchInfiniteQuery(arg1 as any, arg2 as any, arg3)\n      .then(noop)\n      .catch(noop)\n  }\n\n  cancelMutations(): Promise<void> {\n    const promises = notifyManager.batch(() =>\n      this.mutationCache.getAll().map(mutation => mutation.cancel())\n    )\n    return Promise.all(promises).then(noop).catch(noop)\n  }\n\n  resumePausedMutations(): Promise<void> {\n    return this.getMutationCache().resumePausedMutations()\n  }\n\n  executeMutation<\n    TData = unknown,\n    TError = unknown,\n    TVariables = void,\n    TContext = unknown\n  >(\n    options: MutationOptions<TData, TError, TVariables, TContext>\n  ): Promise<TData> {\n    return this.mutationCache.build(this, options).execute()\n  }\n\n  getQueryCache(): QueryCache {\n    return this.queryCache\n  }\n\n  getMutationCache(): MutationCache {\n    return this.mutationCache\n  }\n\n  getDefaultOptions(): DefaultOptions {\n    return this.defaultOptions\n  }\n\n  setDefaultOptions(options: DefaultOptions): void {\n    this.defaultOptions = options\n  }\n\n  setQueryDefaults(\n    queryKey: QueryKey,\n    options: QueryObserverOptions<any, any, any, any>\n  ): void {\n    const result = this.queryDefaults.find(\n      x => hashQueryKey(queryKey) === hashQueryKey(x.queryKey)\n    )\n    if (result) {\n      result.defaultOptions = options\n    } else {\n      this.queryDefaults.push({ queryKey, defaultOptions: options })\n    }\n  }\n\n  getQueryDefaults(\n    queryKey?: QueryKey\n  ): QueryObserverOptions<any, any, any, any> | undefined {\n    return queryKey\n      ? this.queryDefaults.find(x => partialMatchKey(queryKey, x.queryKey))\n          ?.defaultOptions\n      : undefined\n  }\n\n  setMutationDefaults(\n    mutationKey: MutationKey,\n    options: MutationObserverOptions<any, any, any, any>\n  ): void {\n    const result = this.mutationDefaults.find(\n      x => hashQueryKey(mutationKey) === hashQueryKey(x.mutationKey)\n    )\n    if (result) {\n      result.defaultOptions = options\n    } else {\n      this.mutationDefaults.push({ mutationKey, defaultOptions: options })\n    }\n  }\n\n  getMutationDefaults(\n    mutationKey?: MutationKey\n  ): MutationObserverOptions<any, any, any, any> | undefined {\n    return mutationKey\n      ? this.mutationDefaults.find(x =>\n          partialMatchKey(mutationKey, x.mutationKey)\n        )?.defaultOptions\n      : undefined\n  }\n\n  defaultQueryOptions<T extends QueryOptions<any, any, any>>(options?: T): T {\n    if (options?._defaulted) {\n      return options\n    }\n\n    const defaultedOptions = {\n      ...this.defaultOptions.queries,\n      ...this.getQueryDefaults(options?.queryKey),\n      ...options,\n      _defaulted: true,\n    } as T\n\n    if (!defaultedOptions.queryHash && defaultedOptions.queryKey) {\n      defaultedOptions.queryHash = getQueryKeyHashFn(defaultedOptions)(\n        defaultedOptions.queryKey\n      )\n    }\n\n    return defaultedOptions\n  }\n\n  defaultQueryObserverOptions<\n    T extends QueryObserverOptions<any, any, any, any>\n  >(options?: T): T {\n    return this.defaultQueryOptions(options)\n  }\n\n  defaultMutationOptions<T extends MutationOptions<any, any, any, any>>(\n    options?: T\n  ): T {\n    if (options?._defaulted) {\n      return options\n    }\n    return {\n      ...this.defaultOptions.mutations,\n      ...this.getMutationDefaults(options?.mutationKey),\n      ...options,\n      _defaulted: true,\n    } as T\n  }\n\n  clear(): void {\n    this.queryCache.clear()\n    this.mutationCache.clear()\n  }\n}\n","import {\n  isServer,\n  isValidTimeout,\n  noop,\n  replaceEqualDeep,\n  shallowEqualObjects,\n  timeUntilStale,\n} from './utils'\nimport { notifyManager } from './notifyManager'\nimport type {\n  PlaceholderDataFunction,\n  QueryObserverBaseResult,\n  QueryObserverOptions,\n  QueryObserverResult,\n  QueryOptions,\n  RefetchOptions,\n  ResultOptions,\n} from './types'\nimport type { Query, QueryState, Action, FetchOptions } from './query'\nimport type { QueryClient } from './queryClient'\nimport { focusManager } from './focusManager'\nimport { Subscribable } from './subscribable'\nimport { getLogger } from './logger'\n\ntype QueryObserverListener<TData, TError> = (\n  result: QueryObserverResult<TData, TError>\n) => void\n\nexport interface NotifyOptions {\n  cache?: boolean\n  listeners?: boolean\n  onError?: boolean\n  onSuccess?: boolean\n}\n\nexport interface ObserverFetchOptions extends FetchOptions {\n  throwOnError?: boolean\n}\n\nexport class QueryObserver<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryData = TQueryFnData\n> extends Subscribable<QueryObserverListener<TData, TError>> {\n  options: QueryObserverOptions<TQueryFnData, TError, TData, TQueryData>\n\n  private client: QueryClient\n  private currentQuery!: Query<TQueryFnData, TError, TQueryData>\n  private currentQueryInitialState!: QueryState<TQueryData, TError>\n  private currentResult!: QueryObserverResult<TData, TError>\n  private currentResultState?: QueryState<TQueryData, TError>\n  private currentResultOptions?: QueryObserverOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData\n  >\n  private previousQueryResult?: QueryObserverResult<TData, TError>\n  private staleTimeoutId?: number\n  private refetchIntervalId?: number\n  private trackedProps!: Array<keyof QueryObserverResult>\n\n  constructor(\n    client: QueryClient,\n    options: QueryObserverOptions<TQueryFnData, TError, TData, TQueryData>\n  ) {\n    super()\n\n    this.client = client\n    this.options = options\n    this.trackedProps = []\n    this.bindMethods()\n    this.setOptions(options)\n  }\n\n  protected bindMethods(): void {\n    this.remove = this.remove.bind(this)\n    this.refetch = this.refetch.bind(this)\n  }\n\n  protected onSubscribe(): void {\n    if (this.listeners.length === 1) {\n      this.currentQuery.addObserver(this)\n\n      if (shouldFetchOnMount(this.currentQuery, this.options)) {\n        this.executeFetch()\n      }\n\n      this.updateTimers()\n    }\n  }\n\n  protected onUnsubscribe(): void {\n    if (!this.listeners.length) {\n      this.destroy()\n    }\n  }\n\n  shouldFetchOnReconnect(): boolean {\n    return shouldFetchOnReconnect(this.currentQuery, this.options)\n  }\n\n  shouldFetchOnWindowFocus(): boolean {\n    return shouldFetchOnWindowFocus(this.currentQuery, this.options)\n  }\n\n  destroy(): void {\n    this.listeners = []\n    this.clearTimers()\n    this.currentQuery.removeObserver(this)\n  }\n\n  setOptions(\n    options?: QueryObserverOptions<TQueryFnData, TError, TData, TQueryData>,\n    notifyOptions?: NotifyOptions\n  ): void {\n    const prevOptions = this.options\n    const prevQuery = this.currentQuery\n\n    this.options = this.client.defaultQueryObserverOptions(options)\n\n    if (\n      typeof this.options.enabled !== 'undefined' &&\n      typeof this.options.enabled !== 'boolean'\n    ) {\n      throw new Error('Expected enabled to be a boolean')\n    }\n\n    // Keep previous query key if the user does not supply one\n    if (!this.options.queryKey) {\n      this.options.queryKey = prevOptions.queryKey\n    }\n\n    this.updateQuery()\n\n    const mounted = this.hasListeners()\n\n    // Fetch if there are subscribers\n    if (\n      mounted &&\n      shouldFetchOptionally(\n        this.currentQuery,\n        prevQuery,\n        this.options,\n        prevOptions\n      )\n    ) {\n      this.executeFetch()\n    }\n\n    // Update result\n    this.updateResult(notifyOptions)\n\n    // Update stale interval if needed\n    if (\n      mounted &&\n      (this.currentQuery !== prevQuery ||\n        this.options.enabled !== prevOptions.enabled ||\n        this.options.staleTime !== prevOptions.staleTime)\n    ) {\n      this.updateStaleTimeout()\n    }\n\n    // Update refetch interval if needed\n    if (\n      mounted &&\n      (this.currentQuery !== prevQuery ||\n        this.options.enabled !== prevOptions.enabled ||\n        this.options.refetchInterval !== prevOptions.refetchInterval)\n    ) {\n      this.updateRefetchInterval()\n    }\n  }\n\n  getOptimisticResult(\n    options: QueryObserverOptions<TQueryFnData, TError, TData, TQueryData>\n  ): QueryObserverResult<TData, TError> {\n    const defaultedOptions = this.client.defaultQueryObserverOptions(options)\n\n    const query = this.client\n      .getQueryCache()\n      .build(\n        this.client,\n        defaultedOptions as QueryOptions<TQueryFnData, TError, TQueryData>\n      )\n\n    return this.createResult(query, defaultedOptions)\n  }\n\n  getCurrentResult(): QueryObserverResult<TData, TError> {\n    return this.currentResult\n  }\n\n  trackResult(\n    result: QueryObserverResult<TData, TError>\n  ): QueryObserverResult<TData, TError> {\n    const trackedResult = {} as QueryObserverResult<TData, TError>\n\n    Object.keys(result).forEach(key => {\n      Object.defineProperty(trackedResult, key, {\n        configurable: false,\n        enumerable: true,\n        get: () => {\n          const typedKey = key as keyof QueryObserverResult\n          if (!this.trackedProps.includes(typedKey)) {\n            this.trackedProps.push(typedKey)\n          }\n          return result[typedKey]\n        },\n      })\n    })\n\n    return trackedResult\n  }\n\n  getNextResult(\n    options?: ResultOptions\n  ): Promise<QueryObserverResult<TData, TError>> {\n    return new Promise((resolve, reject) => {\n      const unsubscribe = this.subscribe(result => {\n        if (!result.isFetching) {\n          unsubscribe()\n          if (result.isError && options?.throwOnError) {\n            reject(result.error)\n          } else {\n            resolve(result)\n          }\n        }\n      })\n    })\n  }\n\n  getCurrentQuery(): Query<TQueryFnData, TError, TQueryData> {\n    return this.currentQuery\n  }\n\n  remove(): void {\n    this.client.getQueryCache().remove(this.currentQuery)\n  }\n\n  refetch(\n    options?: RefetchOptions\n  ): Promise<QueryObserverResult<TData, TError>> {\n    return this.fetch(options)\n  }\n\n  protected fetch(\n    fetchOptions?: ObserverFetchOptions\n  ): Promise<QueryObserverResult<TData, TError>> {\n    return this.executeFetch(fetchOptions).then(() => {\n      this.updateResult()\n      return this.currentResult\n    })\n  }\n\n  private executeFetch(\n    fetchOptions?: ObserverFetchOptions\n  ): Promise<TQueryData | undefined> {\n    // Make sure we reference the latest query as the current one might have been removed\n    this.updateQuery()\n\n    // Fetch\n    let promise: Promise<TQueryData | undefined> = this.currentQuery.fetch(\n      this.options as QueryOptions<TQueryFnData, TError, TQueryData>,\n      fetchOptions\n    )\n\n    if (!fetchOptions?.throwOnError) {\n      promise = promise.catch(noop)\n    }\n\n    return promise\n  }\n\n  private updateStaleTimeout(): void {\n    this.clearStaleTimeout()\n\n    if (\n      isServer ||\n      this.currentResult.isStale ||\n      !isValidTimeout(this.options.staleTime)\n    ) {\n      return\n    }\n\n    const time = timeUntilStale(\n      this.currentResult.dataUpdatedAt,\n      this.options.staleTime\n    )\n\n    // The timeout is sometimes triggered 1 ms before the stale time expiration.\n    // To mitigate this issue we always add 1 ms to the timeout.\n    const timeout = time + 1\n\n    this.staleTimeoutId = setTimeout(() => {\n      if (!this.currentResult.isStale) {\n        this.updateResult()\n      }\n    }, timeout)\n  }\n\n  private updateRefetchInterval(): void {\n    this.clearRefetchInterval()\n\n    if (\n      isServer ||\n      this.options.enabled === false ||\n      !isValidTimeout(this.options.refetchInterval)\n    ) {\n      return\n    }\n\n    this.refetchIntervalId = setInterval(() => {\n      if (\n        this.options.refetchIntervalInBackground ||\n        focusManager.isFocused()\n      ) {\n        this.executeFetch()\n      }\n    }, this.options.refetchInterval)\n  }\n\n  private updateTimers(): void {\n    this.updateStaleTimeout()\n    this.updateRefetchInterval()\n  }\n\n  private clearTimers(): void {\n    this.clearStaleTimeout()\n    this.clearRefetchInterval()\n  }\n\n  private clearStaleTimeout(): void {\n    clearTimeout(this.staleTimeoutId)\n    this.staleTimeoutId = undefined\n  }\n\n  private clearRefetchInterval(): void {\n    clearInterval(this.refetchIntervalId)\n    this.refetchIntervalId = undefined\n  }\n\n  protected createResult(\n    query: Query<TQueryFnData, TError, TQueryData>,\n    options: QueryObserverOptions<TQueryFnData, TError, TData, TQueryData>\n  ): QueryObserverResult<TData, TError> {\n    const prevQuery = this.currentQuery\n    const prevOptions = this.options\n    const prevResult = this.currentResult\n    const prevResultState = this.currentResultState\n    const prevResultOptions = this.currentResultOptions\n    const queryChange = query !== prevQuery\n    const queryInitialState = queryChange\n      ? query.state\n      : this.currentQueryInitialState\n    const prevQueryResult = queryChange\n      ? this.currentResult\n      : this.previousQueryResult\n\n    const { state } = query\n    let { dataUpdatedAt, error, errorUpdatedAt, isFetching, status } = state\n    let isPreviousData = false\n    let isPlaceholderData = false\n    let data: TData | undefined\n\n    // Optimistically set result in fetching state if needed\n    if (options.optimisticResults) {\n      const mounted = this.hasListeners()\n\n      const fetchOnMount = !mounted && shouldFetchOnMount(query, options)\n\n      const fetchOptionally =\n        mounted && shouldFetchOptionally(query, prevQuery, options, prevOptions)\n\n      if (fetchOnMount || fetchOptionally) {\n        isFetching = true\n        if (!dataUpdatedAt) {\n          status = 'loading'\n        }\n      }\n    }\n\n    // Keep previous data if needed\n    if (\n      options.keepPreviousData &&\n      !state.dataUpdateCount &&\n      prevQueryResult?.isSuccess &&\n      status !== 'error'\n    ) {\n      data = prevQueryResult.data\n      dataUpdatedAt = prevQueryResult.dataUpdatedAt\n      status = prevQueryResult.status\n      isPreviousData = true\n    }\n    // Select data if needed\n    else if (options.select && typeof state.data !== 'undefined') {\n      // Memoize select result\n      if (\n        prevResult &&\n        state.data === prevResultState?.data &&\n        options.select === prevResultOptions?.select\n      ) {\n        data = prevResult.data\n      } else {\n        try {\n          data = options.select(state.data)\n          if (options.structuralSharing !== false) {\n            data = replaceEqualDeep(prevResult?.data, data)\n          }\n        } catch (selectError) {\n          getLogger().error(selectError)\n          error = selectError\n          errorUpdatedAt = Date.now()\n          status = 'error'\n        }\n      }\n    }\n    // Use query data\n    else {\n      data = (state.data as unknown) as TData\n    }\n\n    // Show placeholder data if needed\n    if (\n      typeof options.placeholderData !== 'undefined' &&\n      typeof data === 'undefined' &&\n      status === 'loading'\n    ) {\n      let placeholderData\n\n      // Memoize placeholder data\n      if (\n        prevResult?.isPlaceholderData &&\n        options.placeholderData === prevResultOptions?.placeholderData\n      ) {\n        placeholderData = prevResult.data\n      } else {\n        placeholderData =\n          typeof options.placeholderData === 'function'\n            ? (options.placeholderData as PlaceholderDataFunction<TData>)()\n            : options.placeholderData\n      }\n\n      if (typeof placeholderData !== 'undefined') {\n        status = 'success'\n        data = placeholderData\n        isPlaceholderData = true\n      }\n    }\n\n    const result: QueryObserverBaseResult<TData, TError> = {\n      status,\n      isLoading: status === 'loading',\n      isSuccess: status === 'success',\n      isError: status === 'error',\n      isIdle: status === 'idle',\n      data,\n      dataUpdatedAt,\n      error,\n      errorUpdatedAt,\n      failureCount: state.fetchFailureCount,\n      isFetched: state.dataUpdateCount > 0 || state.errorUpdateCount > 0,\n      isFetchedAfterMount:\n        state.dataUpdateCount > queryInitialState.dataUpdateCount ||\n        state.errorUpdateCount > queryInitialState.errorUpdateCount,\n      isFetching,\n      isLoadingError: status === 'error' && state.dataUpdatedAt === 0,\n      isPlaceholderData,\n      isPreviousData,\n      isRefetchError: status === 'error' && state.dataUpdatedAt !== 0,\n      isStale: isStale(query, options),\n      refetch: this.refetch,\n      remove: this.remove,\n    }\n\n    return result as QueryObserverResult<TData, TError>\n  }\n\n  private shouldNotifyListeners(\n    result: QueryObserverResult,\n    prevResult?: QueryObserverResult\n  ): boolean {\n    if (!prevResult) {\n      return true\n    }\n\n    if (result === prevResult) {\n      return false\n    }\n\n    const { notifyOnChangeProps, notifyOnChangePropsExclusions } = this.options\n\n    if (!notifyOnChangeProps && !notifyOnChangePropsExclusions) {\n      return true\n    }\n\n    if (notifyOnChangeProps === 'tracked' && !this.trackedProps.length) {\n      return true\n    }\n\n    const includedProps =\n      notifyOnChangeProps === 'tracked'\n        ? this.trackedProps\n        : notifyOnChangeProps\n\n    return Object.keys(result).some(key => {\n      const typedKey = key as keyof QueryObserverResult\n      const changed = result[typedKey] !== prevResult[typedKey]\n      const isIncluded = includedProps?.some(x => x === key)\n      const isExcluded = notifyOnChangePropsExclusions?.some(x => x === key)\n      return changed && !isExcluded && (!includedProps || isIncluded)\n    })\n  }\n\n  updateResult(notifyOptions?: NotifyOptions): void {\n    const prevResult = this.currentResult as\n      | QueryObserverResult<TData, TError>\n      | undefined\n\n    this.currentResult = this.createResult(this.currentQuery, this.options)\n    this.currentResultState = this.currentQuery.state\n    this.currentResultOptions = this.options\n\n    // Only notify if something has changed\n    if (shallowEqualObjects(this.currentResult, prevResult)) {\n      return\n    }\n\n    // Determine which callbacks to trigger\n    const defaultNotifyOptions: NotifyOptions = { cache: true }\n\n    if (\n      notifyOptions?.listeners !== false &&\n      this.shouldNotifyListeners(this.currentResult, prevResult)\n    ) {\n      defaultNotifyOptions.listeners = true\n    }\n\n    this.notify({ ...defaultNotifyOptions, ...notifyOptions })\n  }\n\n  private updateQuery(): void {\n    const query = this.client\n      .getQueryCache()\n      .build(\n        this.client,\n        this.options as QueryOptions<TQueryFnData, TError, TQueryData>\n      )\n\n    if (query === this.currentQuery) {\n      return\n    }\n\n    const prevQuery = this.currentQuery\n    this.currentQuery = query\n    this.currentQueryInitialState = query.state\n    this.previousQueryResult = this.currentResult\n\n    if (this.hasListeners()) {\n      prevQuery?.removeObserver(this)\n      query.addObserver(this)\n    }\n  }\n\n  onQueryUpdate(action: Action<TData, TError>): void {\n    const notifyOptions: NotifyOptions = {}\n\n    if (action.type === 'success') {\n      notifyOptions.onSuccess = true\n    } else if (action.type === 'error') {\n      notifyOptions.onError = true\n    }\n\n    this.updateResult(notifyOptions)\n\n    if (this.hasListeners()) {\n      this.updateTimers()\n    }\n  }\n\n  private notify(notifyOptions: NotifyOptions): void {\n    notifyManager.batch(() => {\n      // First trigger the configuration callbacks\n      if (notifyOptions.onSuccess) {\n        this.options.onSuccess?.(this.currentResult.data!)\n        this.options.onSettled?.(this.currentResult.data!, null)\n      } else if (notifyOptions.onError) {\n        this.options.onError?.(this.currentResult.error!)\n        this.options.onSettled?.(undefined, this.currentResult.error!)\n      }\n\n      // Then trigger the listeners\n      if (notifyOptions.listeners) {\n        this.listeners.forEach(listener => {\n          listener(this.currentResult)\n        })\n      }\n\n      // Then the cache listeners\n      if (notifyOptions.cache) {\n        this.client.getQueryCache().notify(this.currentQuery)\n      }\n    })\n  }\n}\n\nfunction shouldLoadOnMount(\n  query: Query<any, any>,\n  options: QueryObserverOptions<any, any>\n): boolean {\n  return (\n    options.enabled !== false &&\n    !query.state.dataUpdatedAt &&\n    !(query.state.status === 'error' && options.retryOnMount === false)\n  )\n}\n\nfunction shouldRefetchOnMount(\n  query: Query<any, any>,\n  options: QueryObserverOptions<any, any>\n): boolean {\n  return (\n    options.enabled !== false &&\n    query.state.dataUpdatedAt > 0 &&\n    (options.refetchOnMount === 'always' ||\n      (options.refetchOnMount !== false && isStale(query, options)))\n  )\n}\n\nfunction shouldFetchOnMount(\n  query: Query<any, any>,\n  options: QueryObserverOptions<any, any>\n): boolean {\n  return (\n    shouldLoadOnMount(query, options) || shouldRefetchOnMount(query, options)\n  )\n}\n\nfunction shouldFetchOnReconnect(\n  query: Query<any, any>,\n  options: QueryObserverOptions<any, any>\n): boolean {\n  return (\n    options.enabled !== false &&\n    (options.refetchOnReconnect === 'always' ||\n      (options.refetchOnReconnect !== false && isStale(query, options)))\n  )\n}\n\nfunction shouldFetchOnWindowFocus(\n  query: Query<any, any>,\n  options: QueryObserverOptions<any, any>\n): boolean {\n  return (\n    options.enabled !== false &&\n    (options.refetchOnWindowFocus === 'always' ||\n      (options.refetchOnWindowFocus !== false && isStale(query, options)))\n  )\n}\n\nfunction shouldFetchOptionally(\n  query: Query<any, any>,\n  prevQuery: Query<any, any>,\n  options: QueryObserverOptions<any, any>,\n  prevOptions: QueryObserverOptions<any, any>\n): boolean {\n  return (\n    (query !== prevQuery ||\n      (options.enabled !== false && prevOptions.enabled === false)) &&\n    isStale(query, options)\n  )\n}\n\nfunction isStale(\n  query: Query<any, any>,\n  options: QueryObserverOptions<any, any>\n): boolean {\n  return query.isStaleByTime(options.staleTime)\n}\n","import { difference, getQueryKeyHashFn, replaceAt } from './utils'\nimport { notifyManager } from './notifyManager'\nimport type { QueryObserverOptions, QueryObserverResult } from './types'\nimport type { QueryClient } from './queryClient'\nimport { NotifyOptions, QueryObserver } from './queryObserver'\nimport { Subscribable } from './subscribable'\n\ntype QueriesObserverListener = (result: QueryObserverResult[]) => void\n\nexport class QueriesObserver extends Subscribable<QueriesObserverListener> {\n  private client: QueryClient\n  private result: QueryObserverResult[]\n  private queries: QueryObserverOptions[]\n  private observers: QueryObserver[]\n\n  constructor(client: QueryClient, queries?: QueryObserverOptions[]) {\n    super()\n\n    this.client = client\n    this.queries = queries || []\n    this.result = []\n    this.observers = []\n    this.setQueries(this.queries)\n  }\n\n  protected onSubscribe(): void {\n    if (this.listeners.length === 1) {\n      this.observers.forEach(observer => {\n        observer.subscribe(result => {\n          this.onUpdate(observer, result)\n        })\n      })\n    }\n  }\n\n  protected onUnsubscribe(): void {\n    if (!this.listeners.length) {\n      this.destroy()\n    }\n  }\n\n  destroy(): void {\n    this.listeners = []\n    this.observers.forEach(observer => {\n      observer.destroy()\n    })\n  }\n\n  setQueries(\n    queries: QueryObserverOptions[],\n    notifyOptions?: NotifyOptions\n  ): void {\n    this.queries = queries\n    this.updateObservers(notifyOptions)\n  }\n\n  getCurrentResult(): QueryObserverResult[] {\n    return this.result\n  }\n\n  getOptimisticResult(queries: QueryObserverOptions[]): QueryObserverResult[] {\n    return queries.map((options, i) => {\n      let observer: QueryObserver | undefined = this.observers[i]\n\n      const defaultedOptions = this.client.defaultQueryObserverOptions(options)\n      const hashFn = getQueryKeyHashFn(defaultedOptions)\n      defaultedOptions.queryHash = hashFn(defaultedOptions.queryKey!)\n\n      if (\n        !observer ||\n        observer.getCurrentQuery().queryHash !== defaultedOptions.queryHash\n      ) {\n        observer = this.observers.find(\n          x => x.getCurrentQuery().queryHash === defaultedOptions.queryHash\n        )\n      }\n\n      if (!observer) {\n        observer = new QueryObserver(this.client, defaultedOptions)\n      }\n\n      return observer.getOptimisticResult(defaultedOptions)\n    })\n  }\n\n  private updateObservers(notifyOptions?: NotifyOptions): void {\n    notifyManager.batch(() => {\n      let hasIndexChange = false\n\n      const prevObservers = this.observers\n      const newObservers = this.queries.map((options, i) => {\n        let observer: QueryObserver | undefined = prevObservers[i]\n\n        const defaultedOptions = this.client.defaultQueryObserverOptions(\n          options\n        )\n        const hashFn = getQueryKeyHashFn(defaultedOptions)\n        defaultedOptions.queryHash = hashFn(defaultedOptions.queryKey!)\n\n        if (\n          !observer ||\n          observer.getCurrentQuery().queryHash !== defaultedOptions.queryHash\n        ) {\n          hasIndexChange = true\n          observer = prevObservers.find(\n            x => x.getCurrentQuery().queryHash === defaultedOptions.queryHash\n          )\n        }\n\n        if (observer) {\n          observer.setOptions(defaultedOptions, notifyOptions)\n          return observer\n        }\n\n        return new QueryObserver(this.client, defaultedOptions)\n      })\n\n      if (prevObservers.length === newObservers.length && !hasIndexChange) {\n        return\n      }\n\n      this.observers = newObservers\n      this.result = newObservers.map(observer => observer.getCurrentResult())\n\n      if (!this.listeners.length) {\n        return\n      }\n\n      difference(prevObservers, newObservers).forEach(observer => {\n        observer.destroy()\n      })\n\n      difference(newObservers, prevObservers).forEach(observer => {\n        observer.subscribe(result => {\n          this.onUpdate(observer, result)\n        })\n      })\n\n      this.notify()\n    })\n  }\n\n  private onUpdate(observer: QueryObserver, result: QueryObserverResult): void {\n    const index = this.observers.indexOf(observer)\n    if (index !== -1) {\n      this.result = replaceAt(this.result, index, result)\n      this.notify()\n    }\n  }\n\n  private notify(): void {\n    notifyManager.batch(() => {\n      this.listeners.forEach(listener => {\n        listener(this.result)\n      })\n    })\n  }\n}\n","import type {\n  FetchNextPageOptions,\n  FetchPreviousPageOptions,\n  InfiniteData,\n  InfiniteQueryObserverOptions,\n  InfiniteQueryObserverResult,\n} from './types'\nimport type { QueryClient } from './queryClient'\nimport { ObserverFetchOptions, QueryObserver } from './queryObserver'\nimport {\n  hasNextPage,\n  hasPreviousPage,\n  infiniteQueryBehavior,\n} from './infiniteQueryBehavior'\nimport { Query } from './query'\n\ntype InfiniteQueryObserverListener<TData, TError> = (\n  result: InfiniteQueryObserverResult<TData, TError>\n) => void\n\nexport class InfiniteQueryObserver<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryData = TQueryFnData\n> extends QueryObserver<\n  TQueryFnData,\n  TError,\n  InfiniteData<TData>,\n  InfiniteData<TQueryData>\n> {\n  // Type override\n  subscribe!: (\n    listener?: InfiniteQueryObserverListener<TData, TError>\n  ) => () => void\n\n  // Type override\n  getCurrentResult!: () => InfiniteQueryObserverResult<TData, TError>\n\n  // Type override\n  protected fetch!: (\n    fetchOptions?: ObserverFetchOptions\n  ) => Promise<InfiniteQueryObserverResult<TData, TError>>\n\n  // eslint-disable-next-line @typescript-eslint/no-useless-constructor\n  constructor(\n    client: QueryClient,\n    options: InfiniteQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData\n    >\n  ) {\n    super(client, options)\n  }\n\n  protected bindMethods(): void {\n    super.bindMethods()\n    this.fetchNextPage = this.fetchNextPage.bind(this)\n    this.fetchPreviousPage = this.fetchPreviousPage.bind(this)\n  }\n\n  setOptions(\n    options?: InfiniteQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData\n    >\n  ): void {\n    super.setOptions({\n      ...options,\n      behavior: infiniteQueryBehavior<TQueryFnData, TError, TData>(),\n    })\n  }\n\n  fetchNextPage(\n    options?: FetchNextPageOptions\n  ): Promise<InfiniteQueryObserverResult<TData, TError>> {\n    return this.fetch({\n      cancelRefetch: true,\n      throwOnError: options?.throwOnError,\n      meta: {\n        fetchMore: { direction: 'forward', pageParam: options?.pageParam },\n      },\n    })\n  }\n\n  fetchPreviousPage(\n    options?: FetchPreviousPageOptions\n  ): Promise<InfiniteQueryObserverResult<TData, TError>> {\n    return this.fetch({\n      cancelRefetch: true,\n      throwOnError: options?.throwOnError,\n      meta: {\n        fetchMore: { direction: 'backward', pageParam: options?.pageParam },\n      },\n    })\n  }\n\n  protected createResult(\n    query: Query<TQueryFnData, TError, InfiniteData<TQueryData>>,\n    options: InfiniteQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData\n    >\n  ): InfiniteQueryObserverResult<TData, TError> {\n    const { state } = this.getCurrentQuery()\n    const result = super.createResult(query, options)\n    return {\n      ...result,\n      fetchNextPage: this.fetchNextPage,\n      fetchPreviousPage: this.fetchPreviousPage,\n      hasNextPage: hasNextPage(this.options, state.data?.pages),\n      hasPreviousPage: hasPreviousPage(this.options, state.data?.pages),\n      isFetchingNextPage:\n        state.isFetching && state.fetchMeta?.fetchMore?.direction === 'forward',\n      isFetchingPreviousPage:\n        state.isFetching &&\n        state.fetchMeta?.fetchMore?.direction === 'backward',\n    }\n  }\n}\n","import { Action, getDefaultState, Mutation } from './mutation'\nimport { notifyManager } from './notifyManager'\nimport type { QueryClient } from './queryClient'\nimport { Subscribable } from './subscribable'\nimport type {\n  MutateOptions,\n  MutationObserverResult,\n  MutationObserverOptions,\n} from './types'\n\n// TYPES\n\ntype MutationObserverListener<TData, TError, TVariables, TContext> = (\n  result: MutationObserverResult<TData, TError, TVariables, TContext>\n) => void\n\ninterface NotifyOptions {\n  listeners?: boolean\n  onError?: boolean\n  onSuccess?: boolean\n}\n\n// CLASS\n\nexport class MutationObserver<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown\n> extends Subscribable<\n  MutationObserverListener<TData, TError, TVariables, TContext>\n> {\n  options!: MutationObserverOptions<TData, TError, TVariables, TContext>\n\n  private client: QueryClient\n  private currentResult!: MutationObserverResult<\n    TData,\n    TError,\n    TVariables,\n    TContext\n  >\n  private currentMutation?: Mutation<TData, TError, TVariables, TContext>\n  private mutateOptions?: MutateOptions<TData, TError, TVariables, TContext>\n\n  constructor(\n    client: QueryClient,\n    options: MutationObserverOptions<TData, TError, TVariables, TContext>\n  ) {\n    super()\n\n    this.client = client\n    this.setOptions(options)\n    this.bindMethods()\n    this.updateResult()\n  }\n\n  protected bindMethods(): void {\n    this.mutate = this.mutate.bind(this)\n    this.reset = this.reset.bind(this)\n  }\n\n  setOptions(\n    options?: MutationObserverOptions<TData, TError, TVariables, TContext>\n  ) {\n    this.options = this.client.defaultMutationOptions(options)\n  }\n\n  protected onUnsubscribe(): void {\n    if (!this.listeners.length) {\n      this.currentMutation?.removeObserver(this)\n    }\n  }\n\n  onMutationUpdate(action: Action<TData, TError, TVariables, TContext>): void {\n    this.updateResult()\n\n    // Determine which callbacks to trigger\n    const notifyOptions: NotifyOptions = {\n      listeners: true,\n    }\n\n    if (action.type === 'success') {\n      notifyOptions.onSuccess = true\n    } else if (action.type === 'error') {\n      notifyOptions.onError = true\n    }\n\n    this.notify(notifyOptions)\n  }\n\n  getCurrentResult(): MutationObserverResult<\n    TData,\n    TError,\n    TVariables,\n    TContext\n  > {\n    return this.currentResult\n  }\n\n  reset(): void {\n    this.currentMutation = undefined\n    this.updateResult()\n    this.notify({ listeners: true })\n  }\n\n  mutate(\n    variables?: TVariables,\n    options?: MutateOptions<TData, TError, TVariables, TContext>\n  ): Promise<TData> {\n    this.mutateOptions = options\n\n    if (this.currentMutation) {\n      this.currentMutation.removeObserver(this)\n    }\n\n    this.currentMutation = this.client.getMutationCache().build(this.client, {\n      ...this.options,\n      variables:\n        typeof variables !== 'undefined' ? variables : this.options.variables,\n    })\n\n    this.currentMutation.addObserver(this)\n\n    return this.currentMutation.execute()\n  }\n\n  private updateResult(): void {\n    const state = this.currentMutation\n      ? this.currentMutation.state\n      : getDefaultState<TData, TError, TVariables, TContext>()\n\n    this.currentResult = {\n      ...state,\n      isLoading: state.status === 'loading',\n      isSuccess: state.status === 'success',\n      isError: state.status === 'error',\n      isIdle: state.status === 'idle',\n      mutate: this.mutate,\n      reset: this.reset,\n    }\n  }\n\n  private notify(options: NotifyOptions) {\n    notifyManager.batch(() => {\n      // First trigger the mutate callbacks\n      if (this.mutateOptions) {\n        if (options.onSuccess) {\n          this.mutateOptions.onSuccess?.(\n            this.currentResult.data!,\n            this.currentResult.variables!,\n            this.currentResult.context!\n          )\n          this.mutateOptions.onSettled?.(\n            this.currentResult.data!,\n            null,\n            this.currentResult.variables!,\n            this.currentResult.context\n          )\n        } else if (options.onError) {\n          this.mutateOptions.onError?.(\n            this.currentResult.error!,\n            this.currentResult.variables!,\n            this.currentResult.context\n          )\n          this.mutateOptions.onSettled?.(\n            undefined,\n            this.currentResult.error,\n            this.currentResult.variables!,\n            this.currentResult.context\n          )\n        }\n      }\n\n      // Then trigger the listeners\n      if (options.listeners) {\n        this.listeners.forEach(listener => {\n          listener(this.currentResult)\n        })\n      }\n    })\n  }\n}\n","import React from 'react'\n\nimport { QueryClient } from '../core'\n\nconst QueryClientContext = (() => {\n  const context = React.createContext<QueryClient | undefined>(undefined)\n  if (typeof window !== 'undefined') {\n    // @ts-ignore\n    window.ReactQueryClientContext = context\n  }\n  return context\n})()\n\nfunction getQueryClientContext() {\n  return typeof window !== 'undefined'\n    ? // @ts-ignore\n      (window.ReactQueryClientContext as React.Context<\n        QueryClient | undefined\n      >) ?? QueryClientContext\n    : QueryClientContext\n}\n\nexport const useQueryClient = () => {\n  const queryClient = React.useContext(getQueryClientContext())\n\n  if (!queryClient) {\n    throw new Error('No QueryClient set, use QueryClientProvider to set one')\n  }\n\n  return queryClient\n}\n\nexport interface QueryClientProviderProps {\n  client: QueryClient\n}\n\nexport const QueryClientProvider: React.FC<QueryClientProviderProps> = ({\n  client,\n  children,\n}) => {\n  React.useEffect(() => {\n    client.mount()\n    return () => {\n      client.unmount()\n    }\n  }, [client])\n\n  const Context = getQueryClientContext()\n\n  return <Context.Provider value={client}>{children}</Context.Provider>\n}\n","import React from 'react'\n\n// CONTEXT\n\ninterface QueryErrorResetBoundaryValue {\n  clearReset: () => void\n  isReset: () => boolean\n  reset: () => void\n}\n\nfunction createValue(): QueryErrorResetBoundaryValue {\n  let isReset = false\n  return {\n    clearReset: () => {\n      isReset = false\n    },\n    reset: () => {\n      isReset = true\n    },\n    isReset: () => {\n      return isReset\n    },\n  }\n}\n\nconst QueryErrorResetBoundaryContext = React.createContext(createValue())\n\n// HOOK\n\nexport const useQueryErrorResetBoundary = () =>\n  React.useContext(QueryErrorResetBoundaryContext)\n\n// COMPONENT\n\nexport interface QueryErrorResetBoundaryProps {\n  children:\n    | ((value: QueryErrorResetBoundaryValue) => React.ReactNode)\n    | React.ReactNode\n}\n\nexport const QueryErrorResetBoundary: React.FC<QueryErrorResetBoundaryProps> = ({\n  children,\n}) => {\n  const value = React.useMemo(() => createValue(), [])\n  return (\n    <QueryErrorResetBoundaryContext.Provider value={value}>\n      {typeof children === 'function'\n        ? (children as Function)(value)\n        : children}\n    </QueryErrorResetBoundaryContext.Provider>\n  )\n}\n","import React from 'react'\n\nimport { notifyManager } from '../core/notifyManager'\nimport { QueryKey } from '../core/types'\nimport { parseFilterArgs, QueryFilters } from '../core/utils'\nimport { useQueryClient } from './QueryClientProvider'\n\nexport function useIsFetching(filters?: QueryFilters): number\nexport function useIsFetching(\n  queryKey?: QueryKey,\n  filters?: QueryFilters\n): number\nexport function useIsFetching(\n  arg1?: QueryKey | QueryFilters,\n  arg2?: QueryFilters\n): number {\n  const mountedRef = React.useRef(false)\n\n  const queryClient = useQueryClient()\n\n  const [filters] = parseFilterArgs(arg1, arg2)\n  const [isFetching, setIsFetching] = React.useState(\n    queryClient.isFetching(filters)\n  )\n\n  const filtersRef = React.useRef(filters)\n  filtersRef.current = filters\n  const isFetchingRef = React.useRef(isFetching)\n  isFetchingRef.current = isFetching\n\n  React.useEffect(() => {\n    mountedRef.current = true\n\n    const unsubscribe = queryClient.getQueryCache().subscribe(\n      notifyManager.batchCalls(() => {\n        if (mountedRef.current) {\n          const newIsFetching = queryClient.isFetching(filtersRef.current)\n          if (isFetchingRef.current !== newIsFetching) {\n            setIsFetching(newIsFetching)\n          }\n        }\n      })\n    )\n\n    return () => {\n      mountedRef.current = false\n      unsubscribe()\n    }\n  }, [queryClient])\n\n  return isFetching\n}\n","import React from 'react'\n\nimport { notifyManager } from '../core/notifyManager'\nimport { noop, parseMutationArgs } from '../core/utils'\nimport { MutationObserver } from '../core/mutationObserver'\nimport { useQueryClient } from './QueryClientProvider'\nimport {\n  UseMutateFunction,\n  UseMutationOptions,\n  UseMutationResult,\n} from './types'\nimport { MutationFunction, MutationKey } from '../core/types'\n\n// HOOK\n\nexport function useMutation<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown\n>(\n  options: UseMutationOptions<TData, TError, TVariables, TContext>\n): UseMutationResult<TData, TError, TVariables, TContext>\nexport function useMutation<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown\n>(\n  mutationFn: MutationFunction<TData, TVariables>,\n  options?: UseMutationOptions<TData, TError, TVariables, TContext>\n): UseMutationResult<TData, TError, TVariables, TContext>\nexport function useMutation<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown\n>(\n  mutationKey: MutationKey,\n  options?: UseMutationOptions<TData, TError, TVariables, TContext>\n): UseMutationResult<TData, TError, TVariables, TContext>\nexport function useMutation<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown\n>(\n  mutationKey: MutationKey,\n  mutationFn?: MutationFunction<TData, TVariables>,\n  options?: UseMutationOptions<TData, TError, TVariables, TContext>\n): UseMutationResult<TData, TError, TVariables, TContext>\nexport function useMutation<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown\n>(\n  arg1:\n    | MutationKey\n    | MutationFunction<TData, TVariables>\n    | UseMutationOptions<TData, TError, TVariables, TContext>,\n  arg2?:\n    | MutationFunction<TData, TVariables>\n    | UseMutationOptions<TData, TError, TVariables, TContext>,\n  arg3?: UseMutationOptions<TData, TError, TVariables, TContext>\n): UseMutationResult<TData, TError, TVariables, TContext> {\n  const mountedRef = React.useRef(false)\n  const [, forceUpdate] = React.useState(0)\n\n  const options = parseMutationArgs(arg1, arg2, arg3)\n  const queryClient = useQueryClient()\n\n  const obsRef = React.useRef<MutationObserver<any, any, any, any>>()\n\n  if (!obsRef.current) {\n    obsRef.current = new MutationObserver(queryClient, options)\n  } else {\n    obsRef.current.setOptions(options)\n  }\n\n  const currentResult = obsRef.current.getCurrentResult()\n\n  React.useEffect(() => {\n    mountedRef.current = true\n\n    const unsubscribe = obsRef.current!.subscribe(\n      notifyManager.batchCalls(() => {\n        if (mountedRef.current) {\n          forceUpdate(x => x + 1)\n        }\n      })\n    )\n    return () => {\n      mountedRef.current = false\n      unsubscribe()\n    }\n  }, [])\n\n  const mutate = React.useCallback<\n    UseMutateFunction<TData, TError, TVariables, TContext>\n  >((variables, mutateOptions) => {\n    obsRef.current!.mutate(variables, mutateOptions).catch(noop)\n  }, [])\n\n  if (currentResult.error && obsRef.current.options.useErrorBoundary) {\n    throw currentResult.error\n  }\n\n  return { ...currentResult, mutate, mutateAsync: currentResult.mutate }\n}\n","import React from 'react'\n\nimport { notifyManager } from '../core/notifyManager'\nimport { QueryObserver } from '../core/queryObserver'\nimport { useQueryErrorResetBoundary } from './QueryErrorResetBoundary'\nimport { useQueryClient } from './QueryClientProvider'\nimport { UseBaseQueryOptions } from './types'\n\nexport function useBaseQuery<TQueryFnData, TError, TData, TQueryData>(\n  options: UseBaseQueryOptions<TQueryFnData, TError, TData, TQueryData>,\n  Observer: typeof QueryObserver\n) {\n  const mountedRef = React.useRef(false)\n  const [, forceUpdate] = React.useState(0)\n\n  const queryClient = useQueryClient()\n  const errorResetBoundary = useQueryErrorResetBoundary()\n  const defaultedOptions = queryClient.defaultQueryObserverOptions(options)\n\n  // Make sure results are optimistically set in fetching state before subscribing or updating options\n  defaultedOptions.optimisticResults = true\n\n  // Include callbacks in batch renders\n  if (defaultedOptions.onError) {\n    defaultedOptions.onError = notifyManager.batchCalls(\n      defaultedOptions.onError\n    )\n  }\n\n  if (defaultedOptions.onSuccess) {\n    defaultedOptions.onSuccess = notifyManager.batchCalls(\n      defaultedOptions.onSuccess\n    )\n  }\n\n  if (defaultedOptions.onSettled) {\n    defaultedOptions.onSettled = notifyManager.batchCalls(\n      defaultedOptions.onSettled\n    )\n  }\n\n  if (defaultedOptions.suspense) {\n    // Always set stale time when using suspense to prevent\n    // fetching again when directly re-mounting after suspense\n    if (typeof defaultedOptions.staleTime !== 'number') {\n      defaultedOptions.staleTime = 1000\n    }\n  }\n\n  if (defaultedOptions.suspense || defaultedOptions.useErrorBoundary) {\n    // Prevent retrying failed query if the error boundary has not been reset yet\n    if (!errorResetBoundary.isReset()) {\n      defaultedOptions.retryOnMount = false\n    }\n  }\n\n  const obsRef = React.useRef<QueryObserver<any, any>>()\n\n  if (!obsRef.current) {\n    obsRef.current = new Observer(queryClient, defaultedOptions)\n  }\n\n  let result = obsRef.current.getOptimisticResult(defaultedOptions)\n\n  React.useEffect(() => {\n    mountedRef.current = true\n\n    const unsubscribe = obsRef.current!.subscribe(\n      notifyManager.batchCalls(() => {\n        errorResetBoundary.clearReset()\n        if (mountedRef.current) {\n          forceUpdate(x => x + 1)\n        }\n      })\n    )\n\n    // Update result to make sure we did not miss any query updates\n    // between creating the observer and subscribing to it.\n    obsRef.current!.updateResult()\n\n    return () => {\n      mountedRef.current = false\n      unsubscribe()\n    }\n  }, [errorResetBoundary])\n\n  React.useEffect(() => {\n    // Do not notify on updates because of changes in the options because\n    // these changes should already be reflected in the optimistic result.\n    obsRef.current!.setOptions(defaultedOptions, { listeners: false })\n  }, [defaultedOptions])\n\n  // Handle suspense\n  if (obsRef.current.options.suspense && result.isLoading) {\n    throw queryClient\n      .fetchQuery(defaultedOptions)\n      .then(data => {\n        defaultedOptions.onSuccess?.(data)\n        defaultedOptions.onSettled?.(data, null)\n      })\n      .catch(error => {\n        errorResetBoundary.clearReset()\n        defaultedOptions.onError?.(error)\n        defaultedOptions.onSettled?.(undefined, error)\n      })\n  }\n\n  // Handle error boundary\n  if (\n    (obsRef.current.options.suspense ||\n      obsRef.current.options.useErrorBoundary) &&\n    result.isError\n  ) {\n    throw result.error\n  }\n\n  // Handle result property usage tracking\n  if (obsRef.current.options.notifyOnChangeProps === 'tracked') {\n    result = obsRef.current.trackResult(result)\n  }\n\n  return result\n}\n","import { QueryObserver } from '../core'\nimport { QueryFunction, QueryKey } from '../core/types'\nimport { parseQueryArgs } from '../core/utils'\nimport { UseQueryOptions, UseQueryResult } from './types'\nimport { useBaseQuery } from './useBaseQuery'\n\n// HOOK\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData\n>(\n  options: UseQueryOptions<TQueryFnData, TError, TData>\n): UseQueryResult<TData, TError>\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData\n>(\n  queryKey: QueryKey,\n  options?: UseQueryOptions<TQueryFnData, TError, TData>\n): UseQueryResult<TData, TError>\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData\n>(\n  queryKey: QueryKey,\n  queryFn: QueryFunction<TQueryFnData>,\n  options?: UseQueryOptions<TQueryFnData, TError, TData>\n): UseQueryResult<TData, TError>\nexport function useQuery<TQueryFnData, TError, TData = TQueryFnData>(\n  arg1: QueryKey | UseQueryOptions<TQueryFnData, TError, TData>,\n  arg2?:\n    | QueryFunction<TQueryFnData>\n    | UseQueryOptions<TQueryFnData, TError, TData>,\n  arg3?: UseQueryOptions<TQueryFnData, TError, TData>\n): UseQueryResult<TData, TError> {\n  const parsedOptions = parseQueryArgs(arg1, arg2, arg3)\n  return useBaseQuery(parsedOptions, QueryObserver)\n}\n","import React from 'react'\n\nimport { notifyManager } from '../core/notifyManager'\nimport { QueriesObserver } from '../core/queriesObserver'\nimport { useQueryClient } from './QueryClientProvider'\nimport { UseQueryOptions, UseQueryResult } from './types'\n\nexport function useQueries(queries: UseQueryOptions[]): UseQueryResult[] {\n  const mountedRef = React.useRef(false)\n  const [, forceUpdate] = React.useState(0)\n\n  const queryClient = useQueryClient()\n\n  const defaultedQueries = queries.map(options => {\n    const defaultedOptions = queryClient.defaultQueryObserverOptions(options)\n\n    // Make sure the results are already in fetching state before subscribing or updating options\n    defaultedOptions.optimisticResults = true\n\n    return defaultedOptions\n  })\n\n  const obsRef = React.useRef<QueriesObserver>()\n\n  if (!obsRef.current) {\n    obsRef.current = new QueriesObserver(queryClient, defaultedQueries)\n  }\n\n  const result = obsRef.current.getOptimisticResult(defaultedQueries)\n\n  React.useEffect(() => {\n    mountedRef.current = true\n\n    const unsubscribe = obsRef.current!.subscribe(\n      notifyManager.batchCalls(() => {\n        if (mountedRef.current) {\n          forceUpdate(x => x + 1)\n        }\n      })\n    )\n\n    return () => {\n      mountedRef.current = false\n      unsubscribe()\n    }\n  }, [])\n\n  React.useEffect(() => {\n    // Do not notify on updates because of changes in the options because\n    // these changes should already be reflected in the optimistic result.\n    obsRef.current!.setQueries(defaultedQueries, { listeners: false })\n  }, [defaultedQueries])\n\n  return result\n}\n","import { QueryObserver } from '../core'\nimport { InfiniteQueryObserver } from '../core/infiniteQueryObserver'\nimport { QueryFunction, QueryKey } from '../core/types'\nimport { parseQueryArgs } from '../core/utils'\nimport { UseInfiniteQueryOptions, UseInfiniteQueryResult } from './types'\nimport { useBaseQuery } from './useBaseQuery'\n\n// HOOK\n\nexport function useInfiniteQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData\n>(\n  options: UseInfiniteQueryOptions<TQueryFnData, TError, TData>\n): UseInfiniteQueryResult<TData, TError>\nexport function useInfiniteQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData\n>(\n  queryKey: QueryKey,\n  options?: UseInfiniteQueryOptions<TQueryFnData, TError, TData>\n): UseInfiniteQueryResult<TData, TError>\nexport function useInfiniteQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData\n>(\n  queryKey: QueryKey,\n  queryFn: QueryFunction<TQueryFnData>,\n  options?: UseInfiniteQueryOptions<TQueryFnData, TError, TData>\n): UseInfiniteQueryResult<TData, TError>\nexport function useInfiniteQuery<TQueryFnData, TError, TData = TQueryFnData>(\n  arg1: QueryKey | UseInfiniteQueryOptions<TQueryFnData, TError, TData>,\n  arg2?:\n    | QueryFunction<TQueryFnData>\n    | UseInfiniteQueryOptions<TQueryFnData, TError, TData>,\n  arg3?: UseInfiniteQueryOptions<TQueryFnData, TError, TData>\n): UseInfiniteQueryResult<TData, TError> {\n  const options = parseQueryArgs(arg1, arg2, arg3)\n  return useBaseQuery(\n    options,\n    InfiniteQueryObserver as typeof QueryObserver\n  ) as UseInfiniteQueryResult<TData, TError>\n}\n"],"names":["_inheritsLoose","subClass","superClass","prototype","Object","create","constructor","__proto__","Subscribable","listeners","subscribe","listener","callback","undefined","push","onSubscribe","filter","x","onUnsubscribe","hasListeners","length","_extends","assign","target","i","arguments","source","key","hasOwnProperty","call","apply","isServer","window","noop","functionalUpdate","updater","input","isValidTimeout","value","Infinity","ensureArray","Array","isArray","difference","array1","array2","indexOf","replaceAt","array","index","copy","slice","timeUntilStale","updatedAt","staleTime","Math","max","Date","now","parseQueryArgs","arg1","arg2","arg3","isQueryKey","queryKey","queryFn","parseMutationArgs","mutationKey","mutationFn","parseFilterArgs","matchQuery","filters","query","active","exact","fetching","inactive","predicate","stale","hashFn","getQueryKeyHashFn","options","queryHash","partialMatchKey","isActive","isStale","isFetching","queryKeyHashFn","hashQueryKey","stableValueHash","JSON","stringify","_","val","isPlainObject","keys","sort","reduce","result","a","b","partialDeepEqual","some","replaceEqualDeep","aSize","bItems","bSize","equalItems","shallowEqualObjects","o","hasObjectPrototype","ctor","prot","toString","isError","Error","sleep","timeout","Promise","resolve","setTimeout","scheduleMicrotask","then","catch","error","FocusManager","removeEventListener","setDefaultEventListener","setEventListener","setup","focused","setFocused","onFocus","forEach","isFocused","document","includes","visibilityState","addEventListener","focusManager","OnlineManager","online","setOnline","onOnline","isOnline","navigator","onLine","onlineManager","defaultRetryDelay","failureCount","min","isCancelable","cancel","CancelledError","revert","silent","isCancelledError","Retryer","config","cancelRetry","cancelFn","continueFn","promiseResolve","promiseReject","cancelOptions","continue","isPaused","isResolved","isTransportCancelable","promise","outerResolve","outerReject","onSuccess","reject","onError","pause","continueResolve","onPause","onContinue","run","promiseOrValue","fn","retry","retryDelay","delay","shouldRetry","onFail","NotifyManager","queue","transactions","notifyFn","batchNotifyFn","batch","flush","schedule","batchCalls","args","setNotifyFunction","setBatchNotifyFunction","notifyManager","logger","console","warn","log","getLogger","setLogger","newLogger","Query","defaultOptions","setOptions","observers","cache","initialState","state","getDefaultState","scheduleGc","cacheTime","setDefaultOptions","clearGcTimeout","gcTimeout","optionalRemove","clearTimeout","remove","setData","prevData","data","isDataEqual","structuralSharing","dispatch","type","dataUpdatedAt","setState","retryer","destroy","reset","observer","enabled","isInvalidated","getCurrentResult","isStaleByTime","find","shouldFetchOnWindowFocus","refetch","shouldFetchOnReconnect","addObserver","notify","removeObserver","invalidate","fetch","fetchOptions","cancelRefetch","queryFnContext","pageParam","fetchFn","context","behavior","onFetch","revertState","fetchMeta","meta","action","reducer","onQueryUpdate","initialData","hasInitialData","initialDataUpdatedAt","hasData","dataUpdateCount","errorUpdateCount","errorUpdatedAt","fetchFailureCount","status","QueryCache","queries","queriesMap","build","client","get","defaultQueryOptions","getQueryDefaults","add","queryInMap","clear","getAll","findAll","Mutation","mutationId","mutationCache","execute","restored","variables","onMutate","executeMutation","onSettled","onMutationUpdate","MutationCache","mutations","mutation","defaultMutationOptions","getMutationDefaults","resumePausedMutations","pausedMutations","infiniteQueryBehavior","fetchMore","isFetchingNextPage","direction","isFetchingPreviousPage","oldPages","pages","oldPageParams","pageParams","newPageParams","cancelled","fetchPage","manual","param","previous","queryFnResult","page","promiseAsAny","getNextPageParam","getPreviousPageParam","finalPromise","finalPromiseAsAny","hasNextPage","nextPageParam","hasPreviousPage","previousPageParam","QueryClient","queryCache","queryDefaults","mutationDefaults","mount","unsubscribeFocus","unsubscribeOnline","unmount","getQueryData","setQueryData","parsedOptions","defaultedOptions","getQueryState","removeQueries","resetQueries","refetchFilters","refetchQueries","cancelQueries","promises","map","all","invalidateQueries","refetchActive","refetchInactive","throwOnError","fetchQuery","prefetchQuery","fetchInfiniteQuery","prefetchInfiniteQuery","cancelMutations","getMutationCache","getQueryCache","getDefaultOptions","setQueryDefaults","setMutationDefaults","_defaulted","defaultQueryObserverOptions","QueryObserver","trackedProps","bindMethods","bind","currentQuery","shouldFetchOnMount","executeFetch","updateTimers","clearTimers","notifyOptions","prevOptions","prevQuery","updateQuery","mounted","shouldFetchOptionally","updateResult","updateStaleTimeout","refetchInterval","updateRefetchInterval","getOptimisticResult","createResult","currentResult","trackResult","trackedResult","defineProperty","configurable","enumerable","typedKey","getNextResult","unsubscribe","getCurrentQuery","clearStaleTimeout","time","staleTimeoutId","clearRefetchInterval","refetchIntervalId","setInterval","refetchIntervalInBackground","clearInterval","prevResult","prevResultState","currentResultState","prevResultOptions","currentResultOptions","queryChange","queryInitialState","currentQueryInitialState","prevQueryResult","previousQueryResult","isPreviousData","isPlaceholderData","optimisticResults","fetchOnMount","fetchOptionally","keepPreviousData","isSuccess","select","selectError","placeholderData","isLoading","isIdle","isFetched","isFetchedAfterMount","isLoadingError","isRefetchError","shouldNotifyListeners","notifyOnChangeProps","notifyOnChangePropsExclusions","includedProps","changed","isIncluded","isExcluded","defaultNotifyOptions","shouldLoadOnMount","retryOnMount","shouldRefetchOnMount","refetchOnMount","refetchOnReconnect","refetchOnWindowFocus","QueriesObserver","setQueries","onUpdate","updateObservers","hasIndexChange","prevObservers","newObservers","InfiniteQueryObserver","fetchNextPage","fetchPreviousPage","MutationObserver","mutate","currentMutation","mutateOptions","QueryClientContext","React","createContext","ReactQueryClientContext","getQueryClientContext","useQueryClient","queryClient","useContext","QueryClientProvider","children","useEffect","Context","createValue","isReset","clearReset","QueryErrorResetBoundaryContext","useQueryErrorResetBoundary","QueryErrorResetBoundary","useMemo","useIsFetching","mountedRef","useRef","useState","setIsFetching","filtersRef","current","isFetchingRef","newIsFetching","useMutation","forceUpdate","obsRef","useCallback","useErrorBoundary","mutateAsync","useBaseQuery","Observer","errorResetBoundary","suspense","useQuery","useQueries","defaultedQueries","useInfiniteQuery"],"mappings":"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"}