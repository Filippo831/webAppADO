"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.QueriesObserver = void 0;

var _inheritsLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/inheritsLoose"));

var _utils = require("./utils");

var _notifyManager = require("./notifyManager");

var _queryObserver = require("./queryObserver");

var _subscribable = require("./subscribable");

var QueriesObserver = /*#__PURE__*/function (_Subscribable) {
  (0, _inheritsLoose2.default)(QueriesObserver, _Subscribable);

  function QueriesObserver(client, queries) {
    var _this;

    _this = _Subscribable.call(this) || this;
    _this.client = client;
    _this.queries = queries || [];
    _this.result = [];
    _this.observers = [];

    _this.setQueries(_this.queries);

    return _this;
  }

  var _proto = QueriesObserver.prototype;

  _proto.onSubscribe = function onSubscribe() {
    var _this2 = this;

    if (this.listeners.length === 1) {
      this.observers.forEach(function (observer) {
        observer.subscribe(function (result) {
          _this2.onUpdate(observer, result);
        });
      });
    }
  };

  _proto.onUnsubscribe = function onUnsubscribe() {
    if (!this.listeners.length) {
      this.destroy();
    }
  };

  _proto.destroy = function destroy() {
    this.listeners = [];
    this.observers.forEach(function (observer) {
      observer.destroy();
    });
  };

  _proto.setQueries = function setQueries(queries, notifyOptions) {
    this.queries = queries;
    this.updateObservers(notifyOptions);
  };

  _proto.getCurrentResult = function getCurrentResult() {
    return this.result;
  };

  _proto.getOptimisticResult = function getOptimisticResult(queries) {
    var _this3 = this;

    return queries.map(function (options, i) {
      var observer = _this3.observers[i];

      var defaultedOptions = _this3.client.defaultQueryObserverOptions(options);

      var hashFn = (0, _utils.getQueryKeyHashFn)(defaultedOptions);
      defaultedOptions.queryHash = hashFn(defaultedOptions.queryKey);

      if (!observer || observer.getCurrentQuery().queryHash !== defaultedOptions.queryHash) {
        observer = _this3.observers.find(function (x) {
          return x.getCurrentQuery().queryHash === defaultedOptions.queryHash;
        });
      }

      if (!observer) {
        observer = new _queryObserver.QueryObserver(_this3.client, defaultedOptions);
      }

      return observer.getOptimisticResult(defaultedOptions);
    });
  };

  _proto.updateObservers = function updateObservers(notifyOptions) {
    var _this4 = this;

    _notifyManager.notifyManager.batch(function () {
      var hasIndexChange = false;
      var prevObservers = _this4.observers;

      var newObservers = _this4.queries.map(function (options, i) {
        var observer = prevObservers[i];

        var defaultedOptions = _this4.client.defaultQueryObserverOptions(options);

        var hashFn = (0, _utils.getQueryKeyHashFn)(defaultedOptions);
        defaultedOptions.queryHash = hashFn(defaultedOptions.queryKey);

        if (!observer || observer.getCurrentQuery().queryHash !== defaultedOptions.queryHash) {
          hasIndexChange = true;
          observer = prevObservers.find(function (x) {
            return x.getCurrentQuery().queryHash === defaultedOptions.queryHash;
          });
        }

        if (observer) {
          observer.setOptions(defaultedOptions, notifyOptions);
          return observer;
        }

        return new _queryObserver.QueryObserver(_this4.client, defaultedOptions);
      });

      if (prevObservers.length === newObservers.length && !hasIndexChange) {
        return;
      }

      _this4.observers = newObservers;
      _this4.result = newObservers.map(function (observer) {
        return observer.getCurrentResult();
      });

      if (!_this4.listeners.length) {
        return;
      }

      (0, _utils.difference)(prevObservers, newObservers).forEach(function (observer) {
        observer.destroy();
      });
      (0, _utils.difference)(newObservers, prevObservers).forEach(function (observer) {
        observer.subscribe(function (result) {
          _this4.onUpdate(observer, result);
        });
      });

      _this4.notify();
    });
  };

  _proto.onUpdate = function onUpdate(observer, result) {
    var index = this.observers.indexOf(observer);

    if (index !== -1) {
      this.result = (0, _utils.replaceAt)(this.result, index, result);
      this.notify();
    }
  };

  _proto.notify = function notify() {
    var _this5 = this;

    _notifyManager.notifyManager.batch(function () {
      _this5.listeners.forEach(function (listener) {
        listener(_this5.result);
      });
    });
  };

  return QueriesObserver;
}(_subscribable.Subscribable);

exports.QueriesObserver = QueriesObserver;